本教程描述数组并展示它们在 C# 中的工作方式。
教程
　　　　本教程分为下述几节：
　　　　1.数组概述
　　　　2.声明数组
　　　　3.初始化数组
　　　　4.访问数组成员
　　　　5.数组是对象
　　　　6.对数组使用 foreach
数组概述
　　　　C# 数组从零开始建立索引，即数组索引从零开始。C# 中数组的工作方式与在大多数其他流行语言中的工作方式类似。但还有一些差异应引起注意。
　　　　 声明数组时，方括号 ([]) 必须跟在类型后面，而不是标识符后面。在 C# 中，将方括号放在标识符后是不合法的语法。
　　　　int[] table; // not int table[];
　　　　另一细节是，数组的大小不是其类型的一部分，而在 C 语言中它却是数组类型的一部分。这使您可以声明一个数组并向它分配 int 对象的任意数组，而不管数组长度如何。
　　　　int[] numbers; // declare numbers as an int array of any size
　　　　numbers = new int[10]; // numbers is a 10-element array
　　　　numbers = new int[20]; // now it's a 20-element array
声明数组
　　　　C# 支持一维数组、多维数组（矩形数组）和数组的数组（交错的数组）。下面的示例展示如何声明不同类型的数组：
　　　　一维数组：
　　　　 int[] numbers;
　　　　多维数组：
　　　　string[,] names;
　　　　数组的数组（交错的）：
　　　　byte[][] scores;
　　　　声明数组（如上所示）并不实际创建它们。在 C# 中，数组是对象（本教程稍后讨论），必须进行实例化。下面的示例展示如何创建数组：
　　　　一维数组：
　　　　int[] numbers = new int[5];
　　　　多维数组：
　　　　string[,] names = new string[5,4];
　　　　数组的数组（交错的）：
　　　　byte[][] scores = new byte[5][];
　　　　for (int x = 0; x < scores.Length; x++)
　　　　{
　　　　　　scores[x] = new byte[4];
　　　　}
　　　　还可以有更大的数组。例如，可以有三维的矩形数组：
　　　　int[,,] buttons = new int[4,5,3];
　　　　甚至可以将矩形数组和交错数组混合使用。例如，下面的代码声明了类型为 int 的二维数组的三维数组的一维数组　　　　int[][,,][,] numbers;