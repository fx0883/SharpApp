1.1 java语言的发展史
1.1.1java语言在互联网时代获得巨大成功
　　大家想一想，在PC下用windows编写的程序能够不做修改就直接拿到UNIX系统上运行吗？显然是不可以的，因为程序的执行最终必须转换成为计算机硬件的机器指令来执行，专门为某种计算机硬件和操作系统编写的程序是不能够直接放到另外的计算机硬件上执行的，至少要做移植工作。要想让程序能够在不同的计算机上能够运行，就要求程序设计语言是能够跨越各种软件和硬件平台的，而java满足了这一需求。
　　1995年，美国Sun Microsystems公司正式向IT业界推出了java语言，该语言具有安全、跨平台、面向对象、简单、适用于网络等显著特点，当时以web为主要形式的互联网正在迅猛发展，java语言的出现迅速引起所有程序员和软件公司的极大关注，程序员们纷纷尝试用java语言编写网络应用程序，并利用网络把程序发布到世界各地进行运行。包括IBM、Oracle、微软、Netscape、Apple、SGI等大公司纷纷与Sun Microsystems公司签订合同，授权使用java平台技术。微软公司总裁比尔盖茨先生在经过研究后认为"java语言是长时间以来最卓越的程序设计语言"。目前，java语言已经成为最流行的网络编程语言，截止到2001年中，全世界大约有310万java程序员，许多大学纷纷开设java课程，java正逐步成为世界上程序员最多的编程语言。
　　在经历了以大型机为代表的集中计算模式和以PC机为代表的分散计算模式之后，互联网的出现使得计算模式进入了网络计算时代。网络计算模式的一个特点是计算机是异构的，即计算机的类型和操作系统是不一样的，例如SUN工作站的硬件是SPARC体系，软件是UNIX中的Solaris操作系统，而PC机的硬件是INTEL体系，操作系统是windows或者是Linux，因此相应的编程语言基本上只是适用于单机系统，例如COBOL、FORTRAN、C、C＋＋等等；网络计算模式的另一个特点是代码可以通过网络在各种计算机上进行迁移，这就迫切需要一种跨平台的编程语言，使得用它编写的程序能够在网络中的各种计算机上能够正常运行，java就是在这种需求下应运而生的。正是因为java语言符合了互联网时代的发展要求，才使它获得了巨大的成功。
1.1.2 java语言的产生
　　任何事物的产生既有必然的原因也有偶然的因素，java语言的出现也验证了这一点。1991年，美国Sun Microsystems公司的某个研究小组为了能够在消费电子产品上开发应用程序，积极寻找合适的编程语言。消费电子产品种类繁多，包括PDA、机顶盒、手机等等，即使是同一类消费电子产品所采用的处理芯片和操作系统也不相同，也存在着跨平台的问题。当时最流行的编程语言是C和C＋＋语言，Sun公司的研究人员就考虑是否可以采用C＋＋语言来编写消费电子产品的应用程序，但是研究表明，对于消费电子产品而言C＋＋语言过于复杂和庞大，并不适用，安全性也并不令人满意。于是，Bill Joy先生领导的研究小组就着手设计和开发出一种语言，称之为Oak。该语言采用了许多C语言的语法，提高了安全性，并且是面向对象的语言，但是Oak语言在商业上并未获得成功。时间转到了1995年，互联网在世界上蓬勃发展，Sun公司发现Oak语言所具有的跨平台、面向对象、安全性高等特点非常符合互联网的需要，于是改进了该语言的设计，要达到如下几个目标：
　　　◇ 创建一种面向对象的程序设计语言，而不是面向过程的语言；
　　　◇ 提供一个解释执行的程序运行环境，是程序代码独立于平台；
　　　◇ 吸收C和C＋＋的优点，使程序员容易掌握；
　　　◇ 去掉C和C＋＋中影响程序健壮性的部分，使程序更安全，例如指针、内存申请和释放；
　　　◇ 实现多线程，使得程序能够同时执行多个任务；
　　　◇ 提供动态下载程序代码的机制；
　　　◇ 提供代码校验机制以保证安全性；
　　
　　最终，Sun公司给该语言取名为java语言，造就了一代成功的编程语。
1.2 java的工作原理
1.2.1 java虚拟机(1)
    java虚拟机是软件模拟的计算机，可以在任何处理器上（无论是在计算机中还是在其它电子设备中）安全并且兼容的执行保存在.class文件中的字节码。java虚拟机的"机器码"保存在.class文件中，有时也可以称之为字节码文件。java程序的跨平台主要是指字节码文件可以在任何具有java虚拟机的计算机或者电子设备上运行，java虚拟机中的java解释器负责将字节码文件解释成为特定的机器码进行运行。java源程序需要通过编译器编译成为.class文件（字节码文件），java程序的编译和执行过程   ——如图所示——
1.2.1 java虚拟机(2)
　　但是，java虚拟机的建立需要针对不同的软硬件平台做专门的实现，既要考虑处理器的型号，也要考虑操作系统的种类。如下图所示，目前在SPARC结构、X86结构、MIPS和PPC等嵌入式处理芯片上、在UNIX、Linux、windows和部分实时操作系统上都有java虚拟机的实现。 ——如图所示——
1.2.2 无用内存自动回收机制
　　在程序的执行过程中，部分内存在使用过后就处于废弃状态，如果不及时进行无用内存的回收，就会导致内存泄漏，进而导致系统崩溃。在C＋＋语言中是由程序员进行内存回收的，程序员需要在编写程序的时候把不再使用的对象内存释放掉；但是这种人为的管理内存释放的方法却往往由于程序员的疏忽而致使内存无法回收，同时也增加了程序员的工作量。而在java运行环境中，始终存在着一个系统级的线程，专门跟踪内存的使用情况，定期检测出不再使用的内存，并进行自动回收，避免了内存的泄露，也减轻了程序员的工作量。
1.2.3 代码安全性检查机制
　　安全和方便总是相对矛盾的。java编程语言的出现使得客户端机器可以方便的从网络上下载java程序到本机上运行，但是如何保证该java程序不携带病毒或者不怀有其它险恶目的呢？如果java语言不能保证执行的安全性，那么它就不可能存活到今天。虽然有时候少数程序员会抱怨说applet连文件系统也不能访问，但是正是各种安全措施的实行才确保了java语言的生存
　　字节码的执行需要经过三个步骤，首先由类装载器（class loader）负责把类文件（.class文件）加载到java虚拟机中，在此过程需要检验该类文件是否符合类文件规范；其次字节码校验器（bytecode verifier）检查该类文件的代码中是否存在着某些非法操作，例如applet程序中写本机文件系统的操作；如果字节码校验器检验通过，由java解释器负责把该类文件解释成为机器码进行执行。java虚拟机采用的是"沙箱"运行模式，即把java程序的代码和数据都限制在一定内存空间里执行，不允许程序访问该内存空间外的内存，如果是applet程序，还不允许访问客户端机器的文件系统。
1.2.4 Java语言的特点(1)
　　1． 简单、面向对象和为人所熟悉
　　java的简单首先体现在精简的系统上，力图用最小的系统实现足够多的功能；对硬件的要求不高，在小型的计算机上便可以良好的运行。和所有的新一代的程序设计语言一样，java也采用了面向对象技术并更加彻底，所有的java程序和applet程序均是对象，封装性实现了模块化和信息隐藏，继承性实现了代码的复用，用户可以建立自己的类库。而且java采用的是相对简单的面向对象技术，去掉了运算符重载、多继承的复杂概念，而采用了单一继承、类强制转换、多线程、引用（非指针）等方式。无用内存自动回收机制也使得程序员不必费心管理内存，是程序设计更加简单，同时大大减少了出错的可能。java语言采用了C语言中的大部分语法，熟悉C语言的程序员会发现java语言在语法上与C语言极其相似。
　　2． 鲁棒并且安全
　　java语言在编译及运行程序时，都要进行严格的检查。作为一种强制类型语言，java在编译和连接时都进行大量的类型检查，防止不匹配问题的发生。如果引用一个非法类型、或执行一个非法类型操作，java将在解释时指出该错误。在java程序中不能采用地址计算的方法通过指针访问内存单元，大大减少了错误发生的可能性；而且java的数组并非用指针实现，这样就可以在检查中避免数组越界的发生。无用内存自动回收机制也增加了java的鲁棒性。
　　作为网络语言，java必须提供足够的安全保障，并且要防止病毒的侵袭。java在运行应用程序时，严格检查其访问数据的权限，比如不允许网络上的应用程序修改本地的数据。下载到用户计算机中的字节代码在其被执行前要经过一个核实工具，一旦字节代码被核实，便由java解释器来执行，该解释器通过阻止对内存的直接访问来进一步提高java的安全性。同时java极高的鲁棒性也增强了java的安全性。
　　3． 结构中立并且可以移植
　　网络上充满了各种不同类型的机器和操作系统，为使java程序能在网络的任何地方运行，java编译器编译生成了与体系结构无关的字节码结构文件格式。任何种类的计算机，只有在其处理器和操作系统上有java运行时环境，字节码文件就可以在该计算机上运行。即使是在单一系统的计算机上，结构中立也有非常大的作用。随着处理器结构的不断发展变化，程序员不得不编写各种版本的程序以在不同的处理器上运行，这使得开发出能够在所有平台上工作的软件集合是不可能的。而使用java将使同一版本的应用程序可以运行在所有的平台上。
　　体系结构的中立也使得java系统具有可移植性。java运行时系统可以移植到不同的处理器和操作系统上，java的编译器是由java语言实现的，解释器是由java语言和标准C语言实现的，因此可以较为方便的进行移植工作。
1.2.4 Java语言的特点(2)
　　4． 高性能
　　虽然java是解释执行的，但它仍然具有非常高的性能，在一些特定的CPU上，java字节码可以快速的转换成为机器码进行执行。而且java字节码格式的设计就是针对机器码的转换，实际转换时相当简便，自动的寄存器分配与编译器对字节码的一些优化可使之生成高质量的代码。随着java虚拟机的改进和"即时编译"（just in time）技术的出现使得java的执行速度有了更大的提高。
　　5． 解释执行、多线程并且是动态的
　　如果你了解C语言和C++语言，可以参考下列java与C/C++语言的比较，如果不了解C语言和C++语言，可以忽略本部分知识。
　　a． 全局变量
　　java程序不能定义程序的全局变量，而类中的公共、静态变量就相当于这个类的全局变量。这样就使全局变量封装在类中，保证了安全性，而在C/C++语言中，由于不加封装的全局变量往往会由于使用不当而造成系统的崩溃。
　　b． 条件转移指令
　　C/C++语言中用goto语句实现无条件跳转，而java语言没有goto语言，通过例外处理语句try、catch、finally来取代之，提高了程序的可读性，也增强了程序的鲁棒性。
　　c． 指针
　　指针是C/C++语言中最灵活，但也是最容易出错的数据类型。用指针进行内存操作往往造成不可预知的错误，而且，通过指针对内存地址进行显示类型转换后，可以类的私有成员，破坏了安全性。在java中，程序员不能进行任何指针操作，同时java中的数组是通过类来实现的，很好的解决了数组越界这一C/C++语言中不做检查的缺点。
　　d． 内存管理
　　在C语言中，程序员使用库函数malloc()和free()来分配和释放内存，C++语言中则是运算符new和delete。再次释放已经释放的内存块或者释放未被分配的内存块，会造成系统的崩溃，而忘记释放不再使用的内存块也会逐渐耗尽系统资源。在java中，所有的数据结构都是对象，通过运算符new分配内存并得到对象的使用权。无用内存回收机制保证了系统资源的完整，避免了内存管理不周而引起的系统崩溃。
　　e． 数据类型的一致性
　　在C/C++语言中，不同的平台上，编译器对简单的数据类型如int、float等分别分配不同的字节数。例如：int在IBM PC上为16位，在VAX-11上就为32位，导致了代码数据的不可移植。在java中，对数据类型的位数分配总是固定的，而不管是在任何的计算机平台上。因此就保证了java数据的平台无关性和可移植性。
　　f． 类型转换
　　在C/C++语言中，可以通过指针进行任意的类型转换，不安全因素大大增加。而在java语言中系统要对对象的处理进行严格的相容性检查，防止不安全的转换。
　　g． 头文件
　　在C/C++语言中使用头文件声明类的原型和全局变量及库函数等，在大的系统中，维护这些头文件是非常困难的。java不支持头文件，类成员的类型和访问权限都封装在一个类中，运行时系统对访问进行控制，防止非法的访问。同时，java中用import语句与其它类进行通信，以便访问其它类的对象。
　　h． 结构和联合
　　C/C++语言中用结构和联合来表示一定的数据结构，但是由于其成员均为公有的，安全性上存在问题。java不支持结构和联合，通过类把数据结构及对该数据的操作都封装在类里面。
　　i． 预处理
　　C/C++语言中有宏定义，而用宏定义实现的代码往往影响程序的可读性，而java不支持宏定义
　　为易于实现跨平台性，java设计成为解释执行，字节码本身包含了许多编译时生成的信息，使连接过程更加简单。而多线程使应用程序可以同时进行不同的操作，处理不同的事件。在多线程机制中，不同的线程处理不同的任务，互不干涉，不会由于某一任务处于等待状态而影响了其它任务的执行，这样就可以容易的实现网络上的实时交互操作。java在执行过程中，可以动态的加载各种类库，这一特点使之非常适合于网络运行，同时也非常有利于软件的开发，即使是更新类库也不必重新编译使用这一类库的应用程序。
1.2.5 java平台－不断扩展的计算平台
　　java不仅是编程语言，还是一个开发平台，java技术给程序员提供了许多工具：编译器、解释器、文档生成器和文件打包工具等等。同时java还是一个程序发布平台，有两种主要的"发布环境"，首先java运行时环境（java runtime environment，简称JRE）包含了完整的类文件包，其次许多主要的浏览器都提供了java解释器和运行时环境。目前Sun公司把java平台划分成J2EE、J2SE、J2ME三个平台，针对不同的市场目标和设备进行定位。J2EE是Java2 Enterprise Edition，主要目的是为企业计算提供一个应用服务器的运行和开发平台。J2EE本身是一个开放的标准，任何软件厂商都可以推出自己的符合J2EE标准的产品，使用户可以有多种选择。IBM、Oracle、BEA、HP等29家已经推出了自己的产品，其中尤以BEA公司的weglogic产品和IBM公司的websphare最为著名。J2EE将逐步发展成为可以与微软的.NET战略相对抗的网络计算平台。J2SE是Java2 Standard Edition，主要目的是为台式机和工作站提供一个开发和运行的平台。我们在学习java的过程中，主要是采用J2SE来进行开发。J2ME是Java2 Micro Edition，主要是面向消费电子产品，为消费电子产品提供一个java的运行平台，使得java程序能够在手机、机顶盒、PDA等产品上运行。上述三个java平台的关系           如图所示
1.3 一切都是对象
1.3.1面向过程
　　面向对象的第一个原则是把数据和对该数据的操作都封装在一个类中，在程序设计时要考虑多个对象及其相互间的关系。有些功能并不一定由一个程序段完全实现，可以让其它对象来实现，在本例中就由类Max完成求最大值的功能。而面向对象的另外一个好处是实现代码的重复使用，例如其它的程序中如果需要求最大值的功能，只需要通过类Max的对象就可以达到目的。但是如果象面向过程的代码段那样把求最大值的算法都实现在该代码段中，则无法复用
　　早期的编程语言如FORTRAN、C基本上都是面向过程的语言，其编程的主要思路专注于算法的实现。例如下面是一个面向过程的求正整数最大值的程序：
　　int maxSoFar=0,price=1; 　　//最大值maxSoFar的初始值为0，price是输入的值
　　　　while(price>0){ 　　　　//循环输入price的值
　　　　if (price>maxSoFar)　　 //输入的值price大于最大值maxSoFar
　　　　maxSoFar=price; 　　　　//则maxSoFar的值为price的值
　　String input=JoptionPane.showInputDialog("Enter the next price")；
　　　　　　　　　　　　　　//继续输入price
　　　　price=Double.parseDouble(input); 　//把字符串input转换成整数price
　　　　}
　　System.out.println("The maximum is "+maxSoFar); //打印最大值maxSoFar
　　}
　　该程序段主要实现了求最大值的算法，但是，如果考虑用面向对象的编程，可以是另外一种方式：
　　Max max=new Max( ); 　　　 　//max是类Max的一个对象
　　while(price>0){
　　　　　max.updateMax(price);　//对象max调用updateMax方法，更新最大值
　　　　　price=max.getPrice( ); //对象max调用getPrice获得下一个price的值
　　　　　}
　　System.out.println("The maximum is "+max.getMax( ));//对象max调用getMax
　　　　　　　　　　　　　　　　　　　　　　方法获得最大值，并打印出来
1.3.2 面向对象
　 纯粹的面向对象程序设计方法是这样的：
　　1． 所有的东西都是对象。可以将对象想象成为一种新型变量，它保存着数据，而且还可以对自身数据进行操作。例如类Max中保留着数据的最大值，同时还有方法updateMax根据新加入的price值产生最新的最大值，还有getMax方法返回数据的最大值。
　　2． 程序是一大堆对象的组合。通过消息传递，各对象知道自己应该做些什么。如果需要让对象做些事情，则须向该对象"发送一条消息"。具体来说，可以将消息想象成为一个调用请求，它调用的是从属于目标对象的一个方法。例如上面面向对象的程序段应该是属于某个类的，比如说是属于类Shopping，则Shopping中就包含了类Max的对象max，调用方法updateMax就相当于Shopping对象对max对象发出一条指令"updateMax"，要求对象max重新计算最大值。
　　3． 每个对象都有自己的存储空间。可容纳其它对象，或者说通过封装现有的对象，可以产生新型对象。因此，尽管对象的概念非常简单，但是经过封装以后却可以在程序中达到任意高的复杂程度。
　　4． 每个对象都属于某个类。根据语法，每个对象都是某个"类"的一个"实例"。一个类的最重要的的特征就是"能将什么消息发给它？"，也就是类本身有哪些操作。例如max是类Max的实例。
1.4 构建java程序
1.4.1 第一个java application
　　java程序分为java application（java 应用程序）和java applet（java小应用程序）两种。下面让我们编写一个java应用程序，它能够利用来自java标准库的System对象的多种方法，打印出与当前运行的系统有关的资料。其中"//"代表一种注释方式，表示从这个符号开始到这行结束的所有内容都是注释。在每个程序文件的开头，如果这个文件的代码中用到了系统所提供的额外的类，就必须放置一个import语句。说它是额外的是指一个特殊的类库"java.lang"会自动导入到每个java文件
　 //这是我们的第一个java application，该程序保存在文件Property.java中
　import java.util.*; /*下面我们用到了Date和Properties这两个类，是
　　　　　　　　　　　　属于java.util这个包的；*/
　　　　　　　　　　　　/*而System和Runtime这两个类，是属于
　　　　　　　　　　　　java.lang这个包的。*/
　public class Property { //程序员给这个类取名为Property
　　public static void main(String args[]){ //main是类的主方法
　　System.out.println(new Date( )); //在命令行下面打印出日期
　　Properties p=System.getProperties( ); //获得系统的Properties对象p
　　p.list(System.out); //在命令行下打印出p中的各个系统变量的值
　　System.out.println("--- Memory Usage:"); /*打印一行字符串---Memory Usage*/
　　Runtime rt=Runtime.getRuntime( ); //获得系统的Runtime对象rt
　　System.out.println("Total Memory= "
　　　　　　　　　　+ rt.totalMemory( ) //打印总内存大小
　　　　　　　　　　+" Free Memory = "
　　　　　　　　　　+rt.freeMemory( )); //打印空闲内存大小
　　　　}
　　}　

　　在java中，程序都是以类的方式组织的，java源文件都保存在以java为后缀的.java文件当中。每个可运行的程序都是一个类文件，或者称之为字节码文件，保存在.class文件中。而作为一个java application，类中必须包含主方法，程序的执行是从main方法开始的，方法头的格式是确定不变的：
　　　public static void main(String args[])
　　其中关键字public意味着方法可以由外部世界调用。main方法的参数是一个字符串数组args，虽然在本程序中没有用到，但是必须列出来。
　　程序的第一行非常有意思：
　　　　System.out.println(new Date());
　　
　　打印语句的参数是一个日期对象Date，而创建Date对象的目的就是把它的值发给println()语句。一旦这个语句执行完毕，Date对象就没用了，而后"无用内存回收器"会将其收回。
　　第二行中调用了System.getProperties( )。从帮助文档中可知，getProperties( )是System类的一个静态方法（static 方法），由于它是"静态"的，所以不必创建任何对象就可以调用该方法。在第三行，Properties对象有一个名为list( )的方法，它将自己的全部内容都发给一个PrintStream对象，该对象就是list()方法的参数。
　　第四行和第六行是典型的打印语句，其中第六行通过运算符"＋"的重载来连接多个字符串对象，在java中只有当"＋"运算符作用于字符串时在能够进行重载。但是让我们仔细观察下述语句：
　　　System.out.println("Total Memory= "
　　　　　　　　　　　+ rt.totalMemory( ) //打印总内存大小
　　　　　　　　　　　+" Free Memory = "
　　　　　　　　　　　+rt.freeMemory( )); //打印空闲内存大小
　　其中，totalMemory( )和freeMemory( )返回的是数值，并非String对象。如果将一个字符串与一个数值相加，结果会如何？在这种情况下，编译器会自动调用一个toString()方法，将该数值（int型或者float型）转换成字符串。经过这样处理以后，就可以用"＋"进行字符串连接了。
　　main()的第五行通过调用Runtime的getRuntime()方法创建了一个Runtime对象，该对象中包含了内存等信息。
1.4.2 java程序的编辑
　　java程序的编辑可以使用任何一种文本编辑器，例如UltraEdit、Notepad、Wordpad甚至word，然后只要把编辑好的文件存成.java文件。当然也可以用一些集成开发环境，例如Borland公司的JBuilder，IBM公司的Visualage for Java，此外还有cafe、kawa等其它集成开发环境。下面两幅图分别是用UltraEdit和JBuilder编辑Property.java文件的情况
　　Sun公司为全世界的java程序员提供了一个免费的java程序开发包（Java Develop Kit，简称JDK），其中包括了java编译器命令"javac"，以及java执行命令"java"，还有帮助文档生成器命令"javadoc"等等。所有这些命令都可以在命令行下运行，例如我们要编译上述java文件Property.java，如果是在windows中进行开发，就可以在"命令提示符"下进行编译，在命令行中敲入"javac Property.java"，   --如图--
1.4.4 java application的执行
　　当编译结束以后，在java源文件中的每一个类都会生成相应的 .class 文件，例如上图中就会生成一个Property.class文件，而java程序在执行时调用的是.class 文件。Java application的执行是在命令行下进行的，如果是在windows系统中，就可以"命令提示符"下敲入"java Propery"进行执行，该"java"命令会启动java虚拟机，并读入Property.class文件进行执行。如右图1_4_2所示：
　　由于该程序的运行结果直接在命令行下进行输出，其结果如右图1_4_3所示
1.4.5 第一个java applet
　　java程序的另一种形式是java applet，applet没有main()方法，它必须嵌在超文本文件中，在浏览器中进行运行。右面这个程序将在浏览器中显示一行字符串.
　//这是我们的第一个java applet，该程序保存在文件HelloEducation.java中
　import java.awt.Graphics; //在进行显示输出时，需要用到类Graphics的对象；
　import java.applet.Applet; //Applet类是所有的java applet的父类；
　public class HelloEducation extends Applet {
　　　　　　　　　　//程序员给这个类取名为HelloEducation
　　　　　　　　　　//所有的applet程序都是Applet类的子类
　　　public String s;
　　　public void init() { 　　　　　　　//
　　　　　s=new String("Welcome to Tongfang Education");
　　　　　　　　　　　　　　//生成一个字符串对象
　}
　public void paint(Graphics g){
　　　　　g.drawString(s,25,25);
　　　　　　　　　　　　　//在浏览器中坐标为（25，25）的位置显示字符串s
　　　}
　}　　
　
　　applet程序是从方法init( )开始执行的，在该方法中完成了对字符串s的初始化工作，而显示功能是在方法paint( )中执行的。paint( )方法是类Applet的一个成员方法，其参数是图形对象Graphics g，通过调用对象g的drawString( )方法就可以显示输出。
1.4.6 java applet的执行
　　java applet程序也是一个类，其编译方式与java application完全一样，HelloEducation.java程序经过编译以后就生成了HelloEducation.class文件。java applet的执行方式与java application完全不同，java applet程序必须嵌入到html文件中才能够执行，因此必须编写相应的html文件。下面为HelloEducaiton.html文件的内容：
<html>
<applet code=HelloEducation.class width=250 height=250>
</applet>
</html>
　　然后可以通过JDK所提供的命令"appletviewer"，在命令行下面执行java applet程序。如果是在windows操作系统中，就可以在"命令提示符"下敲入"appletviewer HelloEducation.html"，如图1_4_4所示。
　　此时系统会弹出另外一个窗口运行该applet程序，结果如图1_4_5所示。
　　applet还可以采用另外一种方式运行，那就是直接在浏览器中打开HelloEducation.html程序，结果如图1_4_6所示。在主流的浏览器如IE、Netscape中都包含有java虚拟机，负责解释执行java applet程序。
1.5 java程序规范
1.5.1 java源程序结构
　　一个完整的java源程序应该包括下列部分：
　　package语句； //该部分至多只有一句，必须放在源程序的第一句
　　import语句； /*该部分可以有若干import语句或者没有，必须放在所有的
　　　　　　　　　 类定义之前*/
　　public classDefinition； //公共类定义部分，至多只有一个公共类的定义
　　　　　 　//java语言规定该java源程序的文件名必须与该公共类名完全一致
　　classDefinition; //类定义部分，可以有0个或者多个类定义
　　interfaceDefinition; //接口定义部分，可以有0个或者多个接口定义
　　例如一个java源程序可以是如下结构，该源程序命名为HelloWorldApp.java：
　　　package javawork.helloworld; /*把编译生成的所有.class文件放到包
　　　　　　　　　　　　　　　　　　 javawork.helloworld中*/
　　　import java.awt.*; 　//告诉编译器本程序中用到系统的AWT包
　　　import javawork.newcentury; /*告诉编译器本程序中用到用户自定义
　　　　　　　　　　　　　　　　　　的包javawork.newcentury*/
　　　public class HelloWorldApp{......} /*公共类HelloWorldApp的定义，
　　　　　　　　　　　　　　　　　　　　　 名字与文件名相同*/
　　　class TheFirstClass{......} //第一个普通类TheFirstClass的定义
　　　class TheSecondClass{......} //第二个普通类TheSecondClass的定义
　　　　　　　　　　　　　　...... //其它普通类的定义
　　　interface TheFirstInterface{......} /*第一个接口
　　　　　　　　　　　　　　　　　　　　　　TheFirstInterface的定义*/
　　　　　　　　　　　　　　　　　...... //其它接口定义
　　package语句：由于java编译器为每个类生成一个字节码文件，且文件名与类名相同，因此同名的类有可能发生冲突。为了解决这一问题，java提供包来管理类名空间，包实际提供了一种命名机制和可见性限制机制。而在java的系统类库中，把功能相似的类放到一个包（package）中，例如所有的图形界面的类都放在java.awt这个包中，与网络功能有关的类都放到java.net这个包中。用户自己编写的类（指.class文件）也应该按照功能放在由程序员自己命名的相应的包中，例如上例中的javawork.helloworld就是一个包。包在实际的实现过程中是与文件系统相对应的，例如javawork.helloworld所对应的目录是path\javawork\helloworld，而path是在编译该源程序时指定的。比如在命令行中编译上述HelloWorldApp.java文件时，可以在命令行中敲入"javac -d f:\javaproject HelloWorldApp.java"，则编译生成的HelloWorldApp.class文件将放在目录f:\javaproject\javawork\helloworld\目录下面，此时f:\javaprojcet相当于path。但是如果在编译时不指定path，则生成的.class文件将放在编译时命令行所在的当前目录下面。比如在命令行目录f:\javaproject下敲入编译命令"javac HelloWorldApp.java"，则生成的HelloWorldApp.class文件将放在目录f:\javaproject下面，此时的package语句相当于没起作用。
　　但是，如果程序中包含了package语句，则在运行时就必须包含包名。例如，HelloWorldApp.java程序的第一行语句是：package p1.p2；编译的时候在命令行下输入"javac -d path HelloWorldApp.java"，则HelloWorldApp.class将放在目录path\p1\p2的下面，这时候运行该程序时有两种方式：
　　第一种：在命令行下的path目录下输入字符"java p1.p2.HelloWorldApp"。
　　第二种：在环境变量classpath中加入目录path，则运行时在任何目录下输入"java p1.p2.HelloWorldApp"即可。
　　import语句：如果在源程序中用到了除java.lang这个包以外的类，无论是系统的类还是自己定义的包中的类，都必须用import语句标识，以通知编译器在编译时找到相应的类文件。例如上例中的java.awt是系统的包，而javawork.newcentury是用户自定义的包。比如程序中用到了类Button，而Button是属于包java.awt的，在编译时编译器将从目录classpath\java\awt中去寻找类Button，classpath是事先设定的环境变量，比如可以设为：classpath=.；d:\jdk1.3\lib\。 classpath也可以称为类路径，需要提醒大家注意的是，在classpath中往往包含多个路径，用分号隔开。例如classpath=.；d:\jdk1.3\lib\中的第一个分号之前的路径是一个点，表示当前目录，分号后面的路径是d:\jdk1.3\lib\，表示系统的标准类库目录。在编译过程中寻找类时，先从环境变量classpath的第一个目录开始往下找，比如先从当前目录往下找java.awt中的类Button时,编译器找不着，然后从环境变量classpath的第二个目录开始往下找，就是从系统的标准类库目录d:\jdk1.3\lib开始往下找java.awt的Button这个类，最后就找到了。如果要从一个包中引入多个类则在包名后加上".*"表示。
　　如果程序中用到了用户自己定义的包中的类，假如在上面程序中要用到javawork.newcentury包中的类HelloWorldApp，而包javawork.newcentury所对应的目录是f:\javaproject\javawork\newcentury，classpath仍旧是classpath=.；d:\jdk1.3\lib\，则编译器在编译时将首先从当前目录寻找包javawork.newcentury，结果是没有找到；然后又从环境变量classpath的第二个目录d:\jdk1.3\lib\开始往下找，但是仍然没有找到。原因在于包javawork.newcentury是放在目录f:\javaproject下面。因此，需要重新设定环境变量classpath，设为classpath=.；d:\jdk1.3\lib\；f:\javaproject\ 。所以编译器从f:\javaproject开始找包javawork.newcentury就可以找到。
　　源文件的命名规则：如果在源程序中包含有公共类的定义，则该源文件名必须与该公共类的名字完全一致，字母的大小写都必须一样。这是java语言的一个严格的规定，如果不遵守，在编译时就会出错。因此，在一个java源程序中至多只能有一个公共类的定义。如果源程序中不包含公共类的定义，则该文件名可以任意取名。如果在一个源程序中有多个类定义，则在编译时将为每个类生成一个.class文件。
1.5.2 java编程规范
　　软件开发是一个集体协作的过程，程序员之间的代码是经常要进行交换阅读的，因此，java源程序有一些约定成俗的命名规定，主要目的是为了提高java程序的可读性。
　　包名：包名是全小写的名词，中间可以由点分隔开，例如：java.awt.event;
　　类名：首字母大写，通常由多个单词合成一个类名，要求每个单词的首字母也要大写，例如class HelloWorldApp;
　
　　接口名：命名规则与类名相同，例如interface Collection;
　　方法名：往往由多个单词合成，第一个单词通常为动词，首字母小写，中间的每个单词的首字母都要大写，例如：balanceAccount，　isButtonPressed;
　　变量名：全小写，一般为名词，例如：length;
　　常量名：基本数据类型的常量名为全大写，如果是由多个单词构成，可以用下划线隔开，例如：int YEAR, int WEEK_OF_MONTH；如果是对象类型的常量，则是大小写混合，由大写字母把单词隔开。
1.5.3 java帮助文档
　　java中所有类库的介绍都保存在java帮助文档中，程序员在编程过程中，必须查阅该帮助文档，了解系统提供的类的功能、成员方法、成员变量等等信息以后，才能够更好的编程。同时，java开发工具包（JDK）提供了
"java"、"javac"、"javadoc"、
"appletviewer"等命令，在java帮助文档中也对此进行了详细的介绍。java帮助文档是以HTML文件的形式组织，通常是安装在JDK目录下的docs子目录中的index.html文件,所以用浏览器就可以进行查阅。例如JDK是安装在D:\jdk1.3目录下面，则用浏览器打开D:\jdk1.3\docs\index.html文件，就可以看到图1_5_1所示的帮助文档。
　 如果希望查阅JDK的命令，则可以选择"Tool Documentation"，如图1_5_2红字所示。
　 此时浏览器就会把java、javac、javadoc、appletviewer等命令列出来，如图1_5_3。
　 但是大多时时候，我们需要查阅的是类库的文档，因此需要在"D:\jdk1.3\docs\index.html"文件中选择"Java 2 Platform API Specification"，如图1_5_4中红字所示。
　 然后就进入了详细的类库介绍，如图1_5_5所示。
1.5.4 java注释
　　单行注释：从"//"开始到本行结束的内容都是注释，例如：
　　　　　　　　 //这是一行单行注释
　　　　　　　　 //则是另一行单行注释
　　
　　多行注释：在"/*"和"*/"之间的所有内容都是注释，例如：
　　　　　　　　　/*这是一段注释分布在多行之中*/
　　 文档注释：在注释方面java提供一种C/C++所不具有的文档注释方式。其核心思想是当程序员编完程序以后，可以通过JDK提供的javadoc命令，生成所编程序的API文档，而该文档中的内容主要就是从文档注释中提取的。该API文档以HTML文件的形式出现，与java帮助文档的风格与形式完全一致。凡是在"/**"和"*/"之间的内容都是文档注释。例如下面的DocTest.java文件：
　　　　　　　/** 这是一个文档注释的例子，主要介绍下面这个类 */
　　　　　　　public class DocTest{
　　　　　　　　　　/** 变量注释，下面这个变量主要是充当整数计数 */
　　　　　　　　　public int i;
　　　　　　　　　　/** 方法注释，下面这个方法的主要功能是计数 */
　　　　　　　　　public void count( ) {}
　　　　　　　}　
　　通过在命令行下面运行"javadoc -d . DocTest.java"，就生成了介绍类DocTest的index.html文件，用浏览器浏览结果如图1_5_6，注意到DocTest.java文件中的文档注释的内容都出现在该index.html文件中。
1.6 建立java开发环境
1.6.1 安装Java Develop Kit(JDK)
　　Sun公司为所有的java程序员提供了一套免费的java开发和运行环境，取名为Java2 SDK，可以从http://sun.com上进行下载，也可以从同方教育网站上下载。但是最新的消息和版本必须从Sun的网站上才能够得到。安装的时候可以选择安装到任意的硬盘驱动器上，例如安装到D:\jdk1.3目录下。通常在JDK目录下有bin、demo、lib、jre等子目录，其中bin目录保存了javac、java、appletviewer等命令文件，demo目录保存了许多java的例子，lib目录保存了java的类库文件，jre保存的是java的运行时环境。
1.6.2 安装java帮助文档
　　由于JDK的安装程序中并不包含帮助文档，因此也必须从Sun的网站上下载进行安装。通常安装在JDK所在目录的docs子目录下面。用浏览器打开docs子目录下的index.html文件就可以阅读所有的帮助文档。
1.6.3 配置类路径
　　在安装完JDK之后，必须配置类路径classpath和环境变量path，JDK才能够正常运行。如果是在windows98中运行，则在
　　C:\autoexec.bat文件的末尾添加下列语句：
　　　classpath= .;d:\jdk1.3\lib;
　　　path=%path%;d:\jdk1.3\bin;
　　如果是在windows2000中，则需要用右键单击桌面上"我的电脑"，选择"属性"，则弹出一个名为"系统特性"的窗口，选择"高级"，然后选择"环境变量"，在"环境变量"窗口中编辑classpath和path。
【本讲小结】
　　java语言的产生起源于Sun Microsystems公司为消费电子产品上应用程序的开发寻找一门编程语言的过程中，而随着互联网时代的到来，原有的Oak软件就顺理成章的改造成java语言推向了市场，其跨平台、面相对象、安全等特点使其得到广泛的应用。通过在不同的软硬件上实现的java虚拟机，java的字节码文件就可以跨平台的进行运行，无用内存自动回收器也给程序员带来了极大的方便。java程序以两种方式进行运行，一种是通过java虚拟机进行直接运行的java application，另一种是通过浏览器进行运行的java applet，但是无论是何种方式，java都是一门纯粹的面向对象的编程语言。面向对象编程的思路认为程序都是对象的组合，因此要克服面向过程编程的思路，直接按照对象和类的思想去组织程序，面向对象所具有的封装性、继承性、多态性等特点使其具有强大的生命力。Sun公司为全世界java开发人员提供了一套免费的软件开发包Java2 SDK，也称为JDK，它不仅是java的开发平台，还是java的运行平台。java源程序存放在.java文件中，可以通过任意一个文本编辑器编辑产生，源程序经过"javac"命令编译过后，就生成了相应的.class文件，而用"java"命令就可以运行.class文件。作为面向对象编程人员来说，大体可以分为两种：类创建者和应用程序员，应用程序员是类的使用者。所以对程序的可读性和API帮助文档就有要求，java语言本身有一套约定成俗的编程规范，同时程序员首先要学会阅读系统API帮助文档，还要学会生成自己编写的程序的API帮助文档。