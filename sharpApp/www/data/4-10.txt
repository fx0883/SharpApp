IContractResolver 接口提供了一种自定义方法，JsonSerializer 如何序列化和反序列化.NET对象和JSON。
实现IContractResolver 接口，然后赋给JsonSerializer 的一个实例，让你控制对象是否被序列化为一个JSON object、或JSON array，对象成员被序列化成什么，他们怎么被序列化，以及他们被调用。
10.1 DefaultContractResolver
DefaultContractResolver 是默认的解析器，被用于序列化器。它提供许多可扩展的手段，通过覆盖虚函数的形式来实现。
10.2 CamelCasePropertyNamesContractResolver
CamelCasePropertyNamesContractResolver 从DefaultContractResolver 继承而来，简单的覆盖了JSON property 名，使用驼峰命名法（camelcase.）。
Product product = new Product
                    {
                      ExpiryDate = new DateTime(2010, 12, 20, 18, 1, 0, DateTimeKind.Utc),
                      Name = "Widget",
                      Price = 9.99m,
                      Sizes = new[] {"Small", "Medium", "Large"}
                    };
string json =
  JsonConvert.SerializeObject(
    product,
    Formatting.Indented,
    new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }
  );
//{
//  "name": "Widget",
//  "expiryDate": "\/Date(1292868060000)\/",
//  "price": 9.99,
//  "sizes": [
//    "Small",
//    "Medium",
//    "Large"
//  ]
//}