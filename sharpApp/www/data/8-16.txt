第二部分  内置类与模块
	这一部分我们将列出Ruby语言标准内置的类与模块，这些类与模块可以在任何Ruby程序中使用而不需要额外使用require语句。

§1.1 Array
	Array类是有序的对象集合。Array类以整数作为索引，索引从0开始，负数索引表示从尾部逆序开始。例如-1表示最后一个元素，-2表示倒数第二个元素，依次类推。
父类
	Array类的父类为Object类。
Mix-in
Enumerable
类方法
§1.2 Bignum
§1.3 Binding
§1.4 Class
§1.5 Continuation
	Continuation对象由Kernel#callcc方法产生，功能有些类似C语言中的setjmp/longjmp，它保存了执行环境，可以供代码以后使用。
	Continuation对象只有一个call方法，当执行了call方法后，当前执行语句会转到Continuation对象的块后面，继续执行下面的代码。
	obj = callcc{|continuation| continuation}
	puts "start..."
	obj.call if obj
	puts "end..."
执行结果为：
	start...
	start...
	end...
	上面的例子中，首先使用callcc生成一个Continuation对象，然后输出“start…”在调用call后，当前执行语句跳转到callcc语句紧接的块后，所以“start…”被输出了两次。在执行了一次call方法后，obj对象会被置为nil。
	
	下面一个例子是在方法内发生跳转：
	def method
		callcc {|cont| return cont}
		puts "in method..."
	end
	puts "start..."
	obj = method()
	puts "end..."
	obj.call if obj
	
	执行结果为：
	start...
	end...
	in method...
	end...
§1.6 Dir
§1.7 Exception
§1.8 FalseClass
§1.9 File
§1.10 File::Stat
§1.11 Fixnum
§1.12 Float
§1.13 Hash
§1.14 Integer
§1.15 IO
§1.16 MatchData
§1.17 Method
§1.18 Module
§1.19 NilClass
§1.20 Numeric
§1.21 Object
§1.22 Proc
§1.23 Process::Status
§1.24 Range
§1.25 Regexp
§1.26 String
§1.27 Struct
§1.28 Struct::Tms
§1.29 Symbol
§1.30 Thread
§1.31 ThreadGroup
§1.32 Time
§1.33 TrueClass
§1.34 UnboundMethod