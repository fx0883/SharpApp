Json.NET支持序列化回调方法。一个回调可以被用于在其序列化和反序列化的前后，通过JsonSerializer来操纵一个对象。
OnSerializing
OnSerialized
OnDeserializing
OnDeserialized
为了告诉序列化器，在整个对象序列化生命周期内哪些方法应该被调用，可采用attribute 来装饰一个方法上去 (OnSerializingAttribute, OnSerializedAttribute, OnDeserializingAttribute, OnDeserializedAttribute).
下面是使用序列化回调方法的例子：
public class SerializationEventTestObject
{
  // 这个成员在序列化和反序列化期间不变
  public int Member1 { get; set; }
  // 这个field的值在序列化期间和之后被设置和重置
  public string Member2 { get; set; }
  // 这个field不序列化。OnDeserializedAttribute在序列化之后设置成员的值
  [JsonIgnore]
  public string Member3 { get; set; }
  // 这个field被设为null，但在反序列化之后被设置
  public string Member4 { get; set; }
  public SerializationEventTestObject()
  {
    Member1 = 11;
    Member2 = "Hello World!";
    Member3 = "This is a nonserialized value";
    Member4 = null;
  }
  [OnSerializing]
  internal void OnSerializingMethod(StreamingContext context)
  {
    Member2 = "This value went into the data file during serialization.";
  }
  [OnSerialized]
  internal void OnSerializedMethod(StreamingContext context)
  {
    Member2 = "This value was reset after serialization.";
  }
  [OnDeserializing]
  internal void OnDeserializingMethod(StreamingContext context)
  {
    Member3 = "This value was set during deserialization";
  }
  [OnDeserialized]
  internal void OnDeserializedMethod(StreamingContext context)
  {
    Member4 = "This value was set after deserialization.";
  }
}
下面通过Json.NET来序列化和反序列化对象:
SerializationEventTestObject obj = new SerializationEventTestObject();
Console.WriteLine(obj.Member1);
// 11
Console.WriteLine(obj.Member2);
// Hello World!
Console.WriteLine(obj.Member3);
// This is a nonserialized value
Console.WriteLine(obj.Member4);
// null
string json = JsonConvert.SerializeObject(obj, Formatting.Indented);
// {
//   "Member1": 11,
//   "Member2": "This value went into the data file during serialization.",
//   "Member4": null
// }
Console.WriteLine(obj.Member1);
// 11
Console.WriteLine(obj.Member2);
// This value was reset after serialization.
Console.WriteLine(obj.Member3);
// This is a nonserialized value
Console.WriteLine(obj.Member4);
// null
obj = JsonConvert.DeserializeObject<SerializationEventTestObject>(json);
Console.WriteLine(obj.Member1);
// 11
Console.WriteLine(obj.Member2);
// This value went into the data file during serialization.
Console.WriteLine(obj.Member3);
// This value was set during deserialization
Console.WriteLine(obj.Member4);
// This value was set after deserialization.