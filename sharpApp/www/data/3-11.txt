#include 指令用于在多重页面上创建需重复使用的函数、页眉、页脚或者其他元素等。
#include 指令
通过使用 #include 指令，我们可以在服务器执行 ASP 文件之前，把另一个ASP文件插入这个文件中。#include 命令用于在多个页面上创建需要重复使用的函数、页眉、页脚或者其他元素等。
如何使用 #include 指令
这里有一个名为 "mypage.asp" 的文件:
<html> 
<body> 
<h2>Words of Wisdom:</h2>
<div><!--#include file="wisdom.inc"--></div> 
<h2>The time is:</h2>
<div><!--#include file="time.inc"--></div>
</body> 
</html> 
这是 "wisdom.inc" 文件:
"One should never increase, beyond what is necessary,
the number of entities required to explain anything."
这是 "time.inc" 文件:
<%
Response.Write(Time)
%>
在浏览器中查看的源代码应该类似这样：
<html>
<body>
<h2>Words of Wisdom:</h2>
<div>"One should never increase, beyond what is necessary,
the number of entities required to explain anything."</div>
<h2>The time is:</h2>
<div>11:33:42 AM</div>
</body>
</html>
Including 文件的语法：
如需在 ASP 中引用文件，请把 #include 命令置于注释标签之中：
<!--#include virtual="somefilename"-->
或者：
<!--#include file ="somefilename"-->
关键词 Virtual
关键词 virtual 指示路径以虚拟目录开始。
如果 "header.inc" 文件位于虚拟目录 /html 中，下面这行代码会插入文件 "header.inc" 中的内容：
<!-- #include virtual ="/html/header.inc" -->
关键词 File
关键词 File 指示一个相对的路径。相对路径起始于含有引用文件的目录。
假设文件位于 html 文件夹的子文件夹 headers 中，下面这段代码可引用 "header.inc" 文件的内容：
<!-- #include file ="headers\header.inc" -->
注意：被引用文件的路径是相对于引用文件的。假如包含 #include 声明的文件不在 html 目录中，这个声明就不会起效。
您也可以使用关键词 file 和语法 (..\) 来引用上级目录中的文件。
提示和注释
在上面的一节中，我们使用 ".inc" 来作为被引用文件的后缀。注意：假如用户尝试直接浏览 INC 文件，这个文件中内容就会暴露。假如被引用的文件中的内容涉及机密，那么最好还是使用 "asp" 作为后缀。ASP 文件中的源代码被编译后是不可见的。被引用的文件也可引用其他文件，同时一个 ASP 文件可以对同一个文件引用多次。
重要事项：在脚本执行前，被引用的文件就会被处理和插入。
下面的代码无法执行，这是由于 ASP 会在为变量赋值之前执行 #include 命令：
<%
fname="header.inc"
%>
<!--#include file="<%=fname%>"-->
不能在脚本分隔符之间包含文件引用：
<%
For i = 1 To n
  <!--#include file="count.inc"-->
Next
%>
但是这段脚本可以工作：
<% For i = 1 to n %>
<!--#include file="count.inc" -->
<% Next %>
<div>ASP Global.asa 文件</div>
Global.asa 文件是一个可选的文件，它可包含可被 ASP 应用程序中每个页面访问的对象、变量以及方法的声明。
Global.asa 文件
Global.asa 文件是一个可选的文件，它可包含可被 ASP 应用程序中每个页面访问的对象、变量以及方法的声明。所有合法的浏览器脚本都能在 Global.asa 中使用。
Global.asa 文件可包含下列内容：
    Application 事件
    Session 事件
    <object> 声明
    TypeLibrary 声明
    #include 指令
注释：Global.asa 文件须存放于 ASP 应用程序的根目录中，且每个应用程序只能有一个 Global.asa 文件。
Global.asa 中的事件
在 Global.asa 中，我们可以告知 application 和 session 对象在启动和结束时做什么事情。完成这项任务的代码被放置在事件操作器中。Global.asa 文件能包含四种类型的事件：
Application_OnStart - 此事件会在首位用户从 ASP 应用程序调用第一个页面时发生。此事件会在 web 服务器重起或者 Global.asa 文件被编辑之后发生。"Session_OnStart" 事件会在此事件发生之后立即发生。
Session_OnStart - 此事件会在每当新用户请求他或她的在 ASP 应用程序中的首个页面时发生。
Session_OnEnd - 此事件会在每当用户结束 session 时发生。在规定的时间（默认的事件为 20 分钟）内如果没有页面被请求，session 就会结束。
Application_OnEnd - 此事件会在最后一位用户结束其 session 之后发生。典型的情况是，此事件会在 Web 服务器停止时发生。此子程序用于在应用程序停止后清除设置，比如删除记录或者向文本文件写信息。
Global.asa 文件可能类似这样：
<script language="vbscript" runat="server">
sub Application_OnStart
  'some code
end sub
sub Application_OnEnd
  'some code
end sub
sub Session_OnStart
  'some code
end sub
sub Session_OnEnd
  'some code
end sub
</script>
注释：由于无法使用 ASP 的脚本分隔符 (<% 和 %>) 在 Global.asa 文件中插入脚本，我们需使用 HTML 的 <script> 元素。
<object> 声明
可通过使用 <object> 标签在 Global.asa 文件中创建带有 session 或者 application 作用域的对象。
注释：<object> 标签应位于 <script> 标签之外。
语法：
<object runat="server" scope="scope" id="id"
{progid="progID"|classid="classID"}>
....
</object>
参数 	描述
scope 	设置对象的作用域（作用范围）（Session 或者 Application）。
id 	为对象指定一个唯一的 id。
ProgID 	
与 ClassID 关联的 id。ProgID 的格式是：[Vendor.]Component[.Version]。
ProgID 或 ClassID 必需被指定。
ClassID 	
为 COM 类对象指定唯一的 id。
ProgID 或 ClassID 必需被指定。
实例
第一个实例创建了一个名为 "MyAd" 且使用 ProgID 参数的 session 作用域对象：
<object runat="server" scope="session" id="MyAd" progid="MSWC.AdRotator">
</object>
第二个实例创建了名为 "MyConnection" 且使用 ClassID 参数的
<object runat="server" scope="application" id="MyConnection"
classid="Clsid:8AD3067A-B3FC-11CF-A560-00A0C9081C21">
</object>
在此 Global.asa 文件中声明的这些对象可被应用程序中的任何脚本使用。
GLOBAL.ASA:
<object runat="server" scope="session" id="MyAd" progid="MSWC.AdRotator">
</object>
您可以从 ASP 应用程序中的任意页面引用此 "MyAd" 对象：
某个 .ASP 文件:
<%=MyAd.GetAdvertisement("/banners/adrot.txt")%> 
TypeLibrary 声明
TypeLibrary （类型库）是一个容器，其中装有对应于 COM 对象的 DLL 文件。通过在 Global.asa 中包含对 TypeLibrary 的调用，可以访问 COM 对象的常量，同时 ASP 代码也能更好地报告错误。假如您的站点的应用程序依赖于已在类型库中声明过数据类型的 COM 对象，您可以在 Global.asa 中对类型库进行声明。
语法：
<!--METADATA TYPE="TypeLib"
file="filename"
uuid="typelibraryuuid"
version="versionnumber"
lcid="localeid"
-->
参数 	描述
file 	规定指向类型库的绝对路径。参数 file 或者 uuid，两者缺一不可。
uuid 	规定了针对类型库的唯一的标识符。参数 file 或者 uuid，两者缺一不可。
version 	可选。用于选择版本。假如没有找到指定的版本，将使用最接近的版本。
lcid 	可选。用于类型库的地区标识符。
错误值
服务器会返回以下的错误消息之一：
错误 	代码 	描述
ASP 	0222 	Invalid type library specification
ASP 	0223 	Type library not found
ASP 	0224 	Type library cannot be loaded
ASP 	0225 	Type library cannot be wrapped
注释：METADATA 标签可位于 Global.asa 文件中的任何位置（在 <script> 标签的内外均可）。不过，我们还是推荐将 METADATA 标签放置于 Global.asa 文件的顶部。
限定
关于可以在 Global.asa 文件中引用的内容的限定：
你无法显示 Global.asa 文件中的文本。此文件无法显示信息。
你只能在 Application_OnStart 和 Application_OnEnd 子例程中使用 Server 和 Application 对象。在 Session_OnEnd 子例程中，你可以使用 Server、Application 和 Session 对象。在 Session_OnStart 子例程中，你可使用任何内建的对象。
如何使用子例程
Global.asa 常用于对变量进行初始化。
下面的例子展示如何检测访问者首次到达站点的确切时间。时间存储在名为 "started" 的 Session 对象中，并且 "started" 变量的值可被应用程序中的任何 ASP 页面访问：
<script language="vbscript" runat="server">
sub Session_OnStart
Session("started")=now()
end sub
</script>
Global.asa 也可用于控制页面访问。
下面的例子展示如何把每位新的访问者重定向到另一个页面，在这个例子中会定向到 "newpage.asp" 这个页面：
<script language="vbscript" runat="server">
sub Session_OnStart
Response.Redirect("newpage.asp")
end sub
</script>
我们还可以在 Global.asa 中包含函数。
在下面的例子中，当 Web 服务器启动时，Application_OnStart 子例程也会启动。随后，Application_OnStart 子例程会调用另一个名为 "getcustomers" 的子例程。"getcustomers" 子例程会打开一个数据库，然后从 "customers" 表中取回一个记录集。此记录集会赋值给一个数组，在不查询数据库的情况下，任何 ASP 页面都能够访问这个数组：
<script language="vbscript" runat="server">
sub Application_OnStart
getcustomers
end sub
sub getcustomers 
set conn=Server.CreateObject("ADODB.Connection")
conn.Provider="Microsoft.Jet.OLEDB.4.0"
conn.Open "c:/webdata/northwind.mdb"
set rs=conn.execute("select name from customers")
Application("customers")=rs.GetRows
rs.Close
conn.Close
end sub
</script>
Global.asa 实例
在这个例子中，我们要创建一个可计算当前访客的 Global.asa 文件。
Application_OnStart 设置当服务器启动时，Application 变量 "visitors" 的值为 0。
每当有新用户访问时，Session_OnStart 子例程就会给变量 "visitors" 加 1。
每当 Session_OnEnd 子例程被触发时，此子例程就会从变量 "visitors" 减 1。
Global.asa 文件：
<script language="vbscript" runat="server">
Sub Application_OnStart
Application("visitors")=0
End Sub
Sub Session_OnStart
Application.Lock
Application("visitors")=Application("visitors")+1
Application.UnLock
End Sub
Sub Session_OnEnd
Application.Lock
Application("visitors")=Application("visitors")-1
Application.UnLock
End Sub
</script>
此 ASP 文件会显示当前用户的数目：
<html>
<head>
</head>
<body>
<div>There are <%response.write(Application("visitors"))%> online now!</div>
</body>
</html>