Json.NET支持序列化和反序列化期间的错误处理。错误处理让你捕捉到一个错误，然后选择是否处理之，并且继续序列化或是让错误抛出直到应用程序。
错误处理通过两个方法来定义：JsonSerializer 上的Error事件，和OnErrorAttribute。
7.1 Error Event
这个Error事件是一个JsonSerializer事件处理器。当序列化和反序列化JSON时，当一个异常抛出时就触发Error事件。就像JsonSerializer 上所有的设置，其也被设置到JsonSerializerSettings 并且传给JsonConvert上的序列化方法。
List<string> errors = new List<string>();
List<DateTime> c = JsonConvert.DeserializeObject<List<DateTime>>(@"[
 ""2009-09-09T00:00:00Z"",
 ""I am not a date and will error!"",
 [
   1
 ],
 ""1977-02-20T00:00:00Z"",
 null,
 ""2000-12-01T00:00:00Z""
]",
  new JsonSerializerSettings
    {
      Error = delegate(object sender, ErrorEventArgs args)
        {
          errors.Add(args.ErrorContext.Error.Message);
          args.ErrorContext.Handled = true;
        },
      Converters = { new IsoDateTimeConverter() }
    });
// 2009-09-09T00:00:00Z
// 1977-02-20T00:00:00Z
// 2000-12-01T00:00:00Z
// The string was not recognized as a valid DateTime. There is a unknown word starting at index 0.
// Unexpected token parsing date. Expected String, got StartArray.
// Cannot convert null value to System.DateTime.
在这个例子中我们反序列化一个JSON数组到一个DateTime集合上。在JsonSerializerSetting上有一个处理器已经被赋值到Error事件上，其记录error消息并标记error已被处理。
反序列化JSON的结果是，三个成功地被反序列化为日期，以及三个格式不对的字符串：一个格式不对的字符串“"I am not a date and will error!”，一个是嵌套的JSON数组，一个是null值，因为这个list不接受nullable DateTime。这个事件处理程序就会记录这些消息，并且Json.NET继续反序列化JSON，因为这些error被标记为已处理了。
有件事要注意，在Json.NET的错误处理中，未处理的消息会向上抛出，并且在他们的父层激活事件，例如在序列化一个对象集合时，一个未处理的错误会被抛出两次，一次是对这个对象的，另一次是对集合的。这就允许你要么处理它，要么在他的父对象里处理它。
JsonSerializer serializer = new JsonSerializer();
serializer.Error += delegate(object sender, ErrorEventArgs args)
  {
    // only log an error once
    if (args.CurrentObject == args.ErrorContext.OriginalObject)
      errors.Add(args.ErrorContext.Error.Message);
  };
如果你不立即处理一个错误，并且只想对它采取一次行动，那么你可以检查当前对象的ErrorEventArg 属性是否等于OriginalObject。OriginalObject就是抛出这个错误的对象，而CurrentObject 就是这个事件被激活时的对象。他们只有在OriginalObject的事件被激活的第一次才发生。
7.2 OnErrorAttribute
这个OnErrorAttribute 工作起来非常类似于Json.NET的其他序列化attribute。为了使用它，你简单把这个attribute 放在一个方法上即可。要有正确的参数：一个StreamingContext 和一个ErrorContext。方法的名称无所谓。
public class PersonError
{
  private List<string> _roles;
  public string Name { get; set; }
  public int Age { get; set; }
  public List<string> Roles
  {
    get
    {
      if (_roles == null)
        throw new Exception("Roles not loaded!");
      return _roles;
    }
    set { _roles = value; }
  }
  public string Title { get; set; }
  [OnError]
  internal void OnError(StreamingContext context, ErrorContext errorContext)
  {
    errorContext.Handled = true;
  }
}
在这个例子中访问Roles属性，当没有roles设置时将会抛出一个异常。这个处理错误的方法将会在序列化Roles时设置为处理器，并允许Json.NET继续序列化类。
PersonError person = new PersonError
  {
    Name = "George Michael Bluth",
    Age = 16,
    Roles = null,
    Title = "Mister Manager"
  };
string json = JsonConvert.SerializeObject(person, Formatting.Indented);
Console.WriteLine(json);
//{
//  "Name": "George Michael Bluth",
//  "Age": 16,
//  "Title": "Mister Manager"
//}