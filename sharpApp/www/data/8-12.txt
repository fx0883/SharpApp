§12.1  ObjectSpace模块
使用ObjectSpace模块可以察看当前系统中的所有对象，也可以和垃圾回收器交互。
include ObjectSpace
a = 123
b = 456.789
each_object(Numeric) { |x| p x }
执行结果如下：
456.789
123.456
2.71828182845905
3.14159265358979
2.22044604925031e-016
1.79769313486232e+308
2.2250738585072e-308
100.0
86400000000
30.6001
30.6001
365.25
365.25
122.1
4.0
36524.25
1867216.25
30.6001
365.25
4.0
100.0
each_object列举系统中的所有指定的对象并返回对象的数目，上述代码列出了系统中所有的数值型数据，除了我们的数据外还有一些系统预定义的常量。输出结果在你的机器上或许会稍有不同。
注意each_ojbect方法并不列举Fixnum, Symbol, true, false和nil型的数据。
a = 102.7
b = 95       # Won't be returned
c = 12345678987654321
count = ObjectSpace.each_object(Numeric) {|x| p x }
puts "Total count: #{count}"
执行结果为:
12345678987654321
102.7
2.71828182845905
3.14159265358979
2.22044604925031e-016
1.79769313486232e+308
2.2250738585072e-308
100.0
86400000000
30.6001
30.6001
365.25
365.25
122.1
4.0
36524.25
1867216.25
30.6001
365.25
4.0
100.0
Total count: 21

使用ObjectSpace模块也可以给对象提供析构方法，这个方法在对象被垃圾回收器摧毁时被调用。
include ObjectSpace
a = "A"
b = "B"
c = "C"
define_finalizer(a, proc {|id| puts "Finalizer one on #{id}" })
define_finalizer(a, proc {|id| puts "Finalizer two on #{id}" })
define_finalizer(b, proc {|id| puts "Finalizer three on #{id}" })
执行结果为：
Finalizer three on 537763470
Finalizer one on 537763480
Finalizer two on 537763480

§12.2  察看类和对象的状态
当找到一个感兴趣的对象，如何察看它的内部状态？毕竟，我们往往对它的内部状态更感兴趣。在静态语言中，对象的类型取决于对象的所属类，察看对象所属的类就可以得到对象支持的方法。和静态语言不同，Ruby支持更为自由的对象。
（to-do 解释Ruby对象的自由性）
可以查看一个对象支持那些方法：
str = “123” #创建一个String对象
list = str.methods
list[0..3] => ["lstrip!", "to_sym", "scan", "instance_variables"]
可以查看某个对象是否支持特定的方法：
str.respond_to?(“==”) => true
str.respond_to?(“scan”) => true
str.respond_to?(“xyz”) => false
也可以查看对象的ID，对象从属的类，对象和类的关系：
num = 6
num.id 						=>  13
num.class						=> Fixnum
num.kind_of? Fixnum			=> true
num.kind_of? Numeric			=> true
num.instance_of? Fixnum		=> true
num.instance_of? Numeric	=> false
可以查看class之间的从属关系，可以通过class#superclass察看类的父类，可以通过Module#ancestors列出所有的父类和模块。
Fixnum.superclass	=> Integer
Fixnum.ancestors		=> [Fixnum, Integer, Precision, Numeric, Comparable, Object, PP::ObjectMixin, Fox, Kernel]
我们还可以查看对象中方法的存取属性，可以查看对象中的常量和局部变量。
	class InfoTest
	@@static_variable = 101
	CONST = "This is a constant!"
	private
	def private_method
	end
	protected
	def protected_method
	end
	public
	def public_method
		@instance_variable = 100
		i = 1
		j = 2
		local_variables
	end
	def InfoTest.class_method
	end
	end
	
	我们可以通过以下方法访问InfoTest类的信息:
	InfoTest.private_instance_methods(false)	=> private_method
	InfoTest.protected_instance_methods(false)	=> protected_method
	InfoTest.public_instance_methods(false)	=> public_method
	InfoTest.singleton_methods(false)			=> class_method
	InfoTest.class_variables						=> @@static_variable
	InfoTest.constants								=> CONST
	InfoTest.constants	- InfoTest.superclass.constants	=> CONST
	
	这里我们可以通过private_instance_methods，protected_instance_methods，public_instance_methods，singleton_methods方法分别访问类的私有方法，保护方法，公有方法和类方法。参数false表示不列出父类的方法，如果参数为true那么父类的相关方法也会被列出。class_variables可以访问类的类变量，constants类出类的包括父类的所有常量，所以InfoTest.constants-InfoTest.superclass.constants表示只列出InfoTest类的常量。这些方法都是在Module类中作的定义，Module类包含许多可以访问类详细信息的方法。
InfoTest是Class类的实例，Class类的继承关系如下，
Class -> Module -> Object
所以InfoTest类可以使用这些方法访问类的详细信息。
info = InfoTest.new
info.instance_variables			=> []
info.public_method
info.instance_variables			=> [@instance_variable]
instance_variables方法在Object类作的定义，返回当前实例对象的中的变量，从上面的代码可以看出，只有当被使用到才会创建相应的变量，从这里也可以看出Ruby的动态性。
§12.3  动态方法调用
在Ruby中，有多种方法可以实现方法的动态调用。
§12.3.1  使用send方法
第一种实现动态方法调用是使用send方法，send方法在Object类中定义，方法的第一个参数是一个符号用来表示所要调用的方法，后面则是所调用方法需要的参数。
"This is a dog1".send(:length)	=> 14
上面的代码中通过send方法去对一个字符串执行length操作，返回字符串的长度。
class TestClass
	def hello(*args)
		"Hello " + args.join(' ')
	end
end
a = TestClass.new
puts a.send :hello, "This", "is", "a", "dog!"
执行结果为：
Hello This is a dog!
§12.3.2  使用Method类和UnboundMethod类
另一种实现动态方法调用是使用Object类的method方法，这个方法返回一个Method类的对象。我们可以使用call方法来执行方法调用。
test1 = "This is a dog1".method(:length)
test1.call		=> 14
class Test
	def initialize(var)
		@var = var
	end
	
	def hello()
		"Hello, @var = #{@var}"
	end
end
k = Test.new(10)
m = k.method(:hello)
m.call   #=> "Hello, @iv = 99"
l = Test.new('Grant')
m = l.method("hello")
m.call   #=> "Hello, @iv = Fred"
可以在使用对象的任何地方使用method对象，当调用call方法时，参数所指明的方法会被执行，这种行为有些像Ｃ语言中的函数指针。你也可以把method对象作为一个迭代器使用。
def square(a)
		a*a
end
mObj = method(:square)
[1, 2, 3, 4].collect(&mObj)		=>　[1 4 9 16]
Method对象都是和某一特定对象绑定的，也就是说你需要通过某一对象使用Method对象。你也可以通过UnboundMethod类创建对象，然后再把它绑定到某个具体的对象中。如果UnboundMethod对象调用时尚未绑定，则会引发异常。
class Double
		def get_value
			2 * @side
		end
	
		def initialize(side)
			@side = side
		end
end
a = Double.instance_method(:get_value) #返回一个UnboundMethod对象
s = Double.new(50)
b = a.bind(s)
puts b.call
执行结果为：
100
看下面一个更具体的例子：
class CommandInterpreter
	def do_2() print "This is 2\n"; end
		def do_1() print "This is 1\n"; end
		def do_4() print "This is 4\n"; end
		def do_3() print "This is 3\n"; end
   
		Dispatcher = {
				?2 => instance_method(:do_2),
				?1 => instance_method(:do_1),
				?4 => instance_method(:do_4),
				?3 => instance_method(:do_3)
		}
		def interpret(string)
			string.each_byte {|i| Dispatcher[i].bind(self).call }
		end
end
interpreter = CommandInterpreter.new
interpreter.interpret('1234')
执行结果为：
This is 1
This is 2
This is 3
This is 4
§12.3.3  使用eval方法
我们还可以使用eval方法实现方法动态调用。eval方法在Kernel模块中定义，有多种变体如class_eval，module_eval，instance_eval等。Eval方法将分析其后的字符串参数并把这个字符串参数作为Ruby代码执行。
str = "Hello"
eval "str + ' World!'"	=> Hello World!
sentence = %q{"This is a test!".length}
eval sentence	=> 15
	当我们在使用eval方法时，我们可以通过eval方法的第二个参数指明eval所运行代码的上下文环境，这个参数可以是Binding类对象或Proc类对象。Binding类封装了代码在某一环境运行的上下文，可以供以后使用。
	class BindingTest
		def initialize(n)
				@value = n
		end
	
		def getBinding
				return binding()	#使用Kernel#binding方法返回一个Binding对象
			end
	end
	
	obj1 = BindingTest.new(10)
	binding1 = obj1.getBinding
	obj2 = BindingTest.new("Binding Test")
	binding2 = obj2.getBinding
	
	puts eval("@value", binding1)		#=> 10
	puts eval("@value", binding2)		#=> Binding Test
	puts eval("@value")					#=> nil
	
可以看到上述代码中，@value在binding1所指明的上下文环境中值为10，在binding2所指明的上下文环境中值为Binding Test。当eval方法不提供binding参数时，在当前上下文环境中@value并未定义，值为nil。
§12.3.4  性能
	从上面我们可以看到，我们有多种实现动态方法调用的方式，但是请注意，在这多种方式中，使用eval方法最慢。Ruby提供了一个Benchmark模块可以用来报告代码的执行时间，衡量代码的性能。以下是使用Benchmark模块来显示不同动态方法调用的执行时间：
require 'benchmark'
test_string = "This is a test!"
meth = test_string.method(:length)
num = 100000
Benchmark.bm(12) do |x|
	x.report("call") { num.times { meth.call } }
		x.report("send") { num.times { test_string.send(:length) } }
		x.report("eval") { num.times { eval "test_string.length" } }
end
执行结果为:
all          0.090000   0.000000   0.090000 (  0.090000)
send         0.090000   0.000000   0.090000 (  0.090000)
eval         1.352000   0.000000   1.352000 (  1.352000)
可以看到，使用eval方法的执行时间远远慢于其他两种。

§12.4  Hook和回调方法
§12.4.1  什么是Hook
最早是在操作系统中出现的Hook概念，在Unix/Linux/Windows中Hook的概念类似，Hook的目的在于允许用户在系统执行原有流程的过程中，插入自己的代码处理一些额外的事情。典型的Hook就是使用实现自己功能的方法替换原有的方法，在所需要的额外处理完成之后，又恢复原有方法的处理流程。
（to-do Hook的图）
§12.4.2  Ruby中的Hook
钩子是一种可以跟踪Ruby事件的技术，例如设定一个钩子侦测对象创建，设定好后，钩子在发生对象创建时触发。Ruby是动态语言，可以在运行时改变类的方法和属性，我们可以很容易实现这样的功能。
下面我们来看一个简单的例子，
module Mod
		alias_method :old_exit, :exit
		def exit(code=0)
			puts "Exiting with #{code}"
			old_exit(code)
		end
end
include Mod
exit(99)
执行结果为：
Exiting with code 99
上面的例子中，先使用alias_method给方法添加别名old_new，然后重写exit方法，在exit方法使用方法的别名来调用原有方法来完成原有功能，然后附加额外的信息。
同样，我们利用这种技术可以跟踪对象的创建。
class Class
		alias_method :old_new, :new
		def new(*args)
			result = old_new(*args)
			puts "The object is: #{result}"
			result
		end
end
class Test
		def initialize(name)
			@name = name
		end
	
		def to_s
			"#{@name}"
		end
end
obj1 = Test.new("obj1")
obj2 = Test.new("obj2")
obj3 = String.new("12345")
执行结果为：
The object is: obj1
The object is: obj2
The object is: 12345
§11.4.2  回调方法
Ruby实现了一些方法，当特定的事件发生时，相应的方法会被调用。你可以重新定义这些方法加入额外的处理或者改变系统的默认行为。
Module#method_added
Module#method_removed
Module#method_undefined
Kernel#singleton_method_added
Kernel#singleton_method_removed
Kernel#singleton_method_ undefined
Class#inherited
Module#extend_object
默认情况下，这些方法什么也不做。
§12.5  跟踪程序的运行
§12.5.1  set_trace_func
可以使用Kernel#set_trace_func来跟踪程序的运行。set_trace_func的原型为：
set_trace_func(proc)    => proc
set_trace_func(nil)     => nil
创建一个Proc作为跟踪的处理器，参数为nil的时候关闭处理。Proc有六个参数，一个事件名称，一个文件名，一个行号，一个对象ID，一个binding(to-do ?)，一个类名。只要发生事件，Proc就会被调用。事件有这么几种：
c-call			调用C语言过程
c-return		从C语言过程中返回
call			调用一个Ruby方法
class			开始一个类或模块的定义
end				结束一个类或模块的定义
line			执行新的一行代码
	raise			发起一个异常
return			从Ruby方法中返回
class Test
		def test
		a = 1
		end
end
set_trace_func proc {|event, file, line, id, binding, classname|
printf "%10s %10s:%2d %10s %8s\n", event, file, line, id, classname
}
t = Test.new
t.test
执行结果为：
      line    test.rb:11               false
    c-call    test.r	b:11        new    Class
    c-call    test.rb:11 initialize   Object
  c-return    test.rb:11 initialize   Object
  c-return    test.rb:11        new    Class
      line    test.rb:12               false
      call    test.rb: 2       test     Test
      line    test.rb: 3       test     Test
    return    test.rb: 3       test     Test
§12.5.2  trace_var
可以使用Kernel#trace_var方法对全局变量添加钩子，当对一个全局变量执行赋值操作时，这个钩子会被调用。第一个参数是一个符号，用来指明要监视哪一个全局变量，第二个参数是发生赋值操作时执行的Proc对象或块。
trace_var :$_, proc {|v| puts "$_ is now '#{v}'" }
$_ = "hello"
$_ = "there"
执行结果为：
$_ is now 'hello'
$_ is now 'there'
§12.5.3  caller
可以使用Kernel#caller来得到当前的调用堆栈。
def meth1
		puts caller.join("\n")
end
def meth2
		meth1
end
def meth3
		meth2
end
meth3
执行结果为:
test.rb:6:in `meth2'
test.rb:10:in `meth3'
test.rb:13
§12.5.3  __FILE__,__LINE__和SCRIPT_LINES__
__FILE__ 指明当前的原文件名
__LINE__ 当前在源文件中的行号
__FILE__经常和全局变量$0一起使用来判断一个文件是否由用户直接调用。举个例子，库文件的开发者经常在所开发的库中包含一些测试代码，这些测试代码在库被其他文件引用时不会执行。
# library code
# ...
if __FILE__ == $0
# tests...
end
SCRIPT_LINES__默认情况下不会被定义。若将它定义为哈希表后，在解释源代码时，它将依次处理使用require或load载入的文件，将源文件名作为哈希表元素的索引，源文件的内容会被按行切分转化为数组作为哈希表的内容。
SCRIPT_LINES__ = {}
require 'Benchmark'
puts "Files: #{SCRIPT_LINES__.keys.join(', ')}"
SCRIPT_LINES__['d:/ruby/lib/ruby/1.8/Benchmark.rb'].each{ |line|
		puts "Source: #{line}"
}
以上代码将输出Benchmark.rb的内容。