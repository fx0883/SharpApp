7．1 Swing简介
7.1.1 简介
　　第五讲中我们学习了AWT，AWT是Swing的基础。Swing的产生主要原因就是AWT不能满足图形化用户界面发展的需要。
AWT设计的初衷是支持开发小应用程序的简单用户界面。例如AWT缺少剪贴板、打印支持、键盘导航等特性，而且原来的AWT甚至不包括弹出式菜单或滚动窗格等基本元素。
　　此外AWT还存在着严重的缺陷，人们使AWT适应基于继承的、具有很大伸缩性的事件模型，基于同位体的体系结构也成为其致命的弱点。
　　随着发展的需要，Swing出现了，Swing组件几乎都是轻量组件，与重量组件相比，没有本地的对等组件，不像重量组件要在它们自己的本地不透明窗体中绘制，轻量组件在它们的重量组件的窗口中绘制。
　　这一讲我们讲一下基本的Swing组件使用方法和使用Swing组件创建用户界面的初步方法。
　　Swing是由100%纯Java实现的，Swing组件是用Java实现的轻量级（ light-weight）组件，没有本地代码，不依赖操作系统的支持，这是它与AWT组件的最大区别。由于AWT组件通过与具体平台相关的对等类（Peer）实现，因此Swing比AWT组件具有更强的实用性。Swing在不同的平台上表现一致，并且有能力提供本地窗口系统不支持的其它特性。
　　Swing采用了一种MVC的设计范式，即"模型-视图-控制"（Model-View-Controller），其中模型用来保存内容，视图用来显示内容，控制器用来控制用户输入。
　　Swing外观感觉采用可插入的外观感觉（Pluggable Look and Feel，PL&F）
　　在AWT组件中，由于控制组件外观的对等类与具体平台相关，使得AWT组件总是只有与本机相关的外观。Swing使得程序在一个平台上运行时能够有不同的外观。用户可以选择自己习惯的外观。以下三幅图是在同一个操作系统下得到不同的外观。
Metal风格 

Motif风格
 
Windows风格
7.1.2 Swing的类层次结构
　　在javax.swing包中，定义了两种类型的组件：顶层容器（JFrame，JApplet，JDialog和JWindow）和轻量级组件。Swing组件都是AWT的Container类的直接子类和间接子类。
　　java.awt.Component
　　　　-java.awt.Container
　　　　　　　-java.awt.Window
　　　　　　　　　　-java.awt.Frame-javax.swing.JFrame
　　　　　　　　　　-javax.Dialog-javax.swing.JDialog
　　　　　　　　　　-javax.swing.JWindow
　　　　　　　-java.awt.Applet-javax.swing.JApplet
　　　　　　　-javax.swing.Box
　　　　　　　-javax.swing.Jcomponet
　　Swing包是JFC（Java Foundation Classes）的一部分，由许多包组成，如下表：
　　　　　　包 	　　　　　　　　描述
　　Com.sum.swing.plaf.motif 	用户界面代表类，它们实现Motif界面样式　　
Com.sum.java.swing.plaf.windows 	用户界面代表类，它们实现Windows界面样式
　　Javax.swing 	　　Swing组件和使用工具
　　Javax.swing.border　 	　　Swing轻量组件的边框
　　Javax.swing.colorchooser 	　　JcolorChooser的支持类/接口
　　Javax.swing.event 	　　事件和侦听器类
　　Javax.swing.filechooser 	　　JFileChooser的支持类/接口
　　Javax.swing.pending 	　　未完全实现的Swing组件
　　Javax.swing.plaf 	　　抽象类，定义UI代表的行为
　　Javax.swing.plaf.basic 	　　实现所有标准界面样式公共功能的基类
　　Javax.swing.plaf.metal 	用户界面代表类，它们实现Metal界面样式
　　Javax.swing.table 	　　Jtable组件
　　Javax.swing.text 	　　支持文档的显示和编辑
　　Javax.swing.text.html 	　　支持显示和编辑HTML文档
　　Javax.swing.text.html.parser 	　　Html文档的分析器
　　Javax.swing.text.rtf 	　　支持显示和编辑RTF文件
　　Javax.swing.tree 	　　Jtree组件的支持类
　　Javax.swing.undo 	　　支持取消操作

　　(在jdk1.3中，第一、第二和pending包没有了，增加了plaf.multi包，主要功能：给缺省的L&F加上附加的L&F，例如一个MultiButtonUI实例可以同时处理MotifButtonUI和AudioButtonUI.)
　　swing包是Swing提供的最大包，它包含将近100个类和25个接口，几乎所有的Swing组件都在swing包中，只有JtableHeader和　　　JtextComponent是例外，它们分别在swing.table和swing.text中。
　　swing.border包中定义了事件和事件监听器类，与AWT的event包类似。它们都包括事件类和监听器接口。
　　swing.pending包包含了没有完全实现的Swing组件。
　　swing.table包中主要包括了表格组建（JTable）的支持类。
　　swing.tree同样是JTree的支持类。
　　swing.text、swing.text.html、swing.text.html.parser和swing.text.rtf都是用于显示和编辑文档的包。
7.1.3 Swing组件的多样化
　　Swing是AWT的扩展，它提供了许多新的图形界面组件。Swing组件以"J"开头，除了有与AWT类似的按钮（JButton)、标签（JLabel)、复选框（JCheckBox)、菜单（JMenu）等基本组件外，还增加了一个丰富的高层组件集合，如表格（JTable）、树（JTree）。
7.1.4 MVC(Model-View-Control)体系结构
　　Swing胜过AWT的主要优势在于MVC体系结构的普遍使用。在一个MVC用户界面中，存三个通讯对象：模型、视图和控件。模型是指定的逻辑表示法，视图是模型的可视化表示法，而控件则指定了如何处理用户输入。当模型发生改变时，它会通知所有依赖它的视图，视图使用控件指定其相应机制。
　　为了简化组件的设计工作，在Swing组件中视图和控件两部分合为一体。每个组件有一个相关的分离模型和它使用的界面（包括视图和控件）。比如，按钮JButton有一个存储其状态的分离模型ButtonModel对象。组件的模型是自动设置的，例如一般都使用JButton 而不是使用ButtonModel 对象。另外，通过Model类的子类或通过实现适当的接口，可以为组件建立自己的模型。把数据模型与组件联系起来用setModel( )方法。
　　MVC是现有的编程语言中制作图形用户界面的一种通用的思想，其思路是把数据的内容本身和显示方式分离开，这样就使得数据的显示更加灵活多样。比如，某年级各个班级的学生人数是数据，则显示方式是多种多样的，可以采用柱状图显示，也可以采用饼图显示，也可以采用直接的数据输出。因此在设计的时候，就考虑把数据和显示方式分开，对于实现多种多样的显示是非常有帮助的。
7.1.5 可存取性支持
　　所有Swing组件都实现了Accessible接口，提供对可存取性的支持，使得辅助功能如屏幕阅读器能够十分方便的从Swing组件中得到信息。
7.1.6 支持键盘操作
　　在Swing组件中，使用JComponent类的registerKeyboardAction（）方法，能使用户通过键盘操作来替代鼠标驱动GUI上Swing组件的相应动作。有些类还为键盘操作提供了更便利的方法。
　　其实这就相当于热键，使得用户可以只用键盘进行操作。
7.1.7 设置边框
　　对Swing组件可以设置一个和多个边框。Swing中提供了各式各样的边框供用户选用，也能建立组合边框或自己设计边框。一种空白边框可以增大组件，协助布局管理器对容器中的组件进行合理的布局。
7.1.8 使用图标（Icon）
　　与AWT的部件不同，许多Swing组件如按钮、标签，除了使用文字外，还可以使用图标修饰自己。
例7．1：
　　import javax.swing.*; //引入Swing包名
　　　　　　　　　　　　　//import com.sun.java.swing.*;
　　　　　　　　　　　　　//使用JDK 1.2 Beta 4版和所有Swing 1.1 Beta 3
　　　　　　　　　　　　　//之前的版本,引入Swing包名用此方法。
　　import java.awt.*;
　　import java.awt.event.*;
　　public class SwingApplication {
　　　　private static String labelPrefix = "Number of button clicks: ";
　　　　private int numClicks = 0; //计数器，计算点击次数
　　　　public Component createComponents() {
　　　　　　final JLabel label = new JLabel(labelPrefix + "0 ");
　　　　　　JButton button = new JButton("I'm a Swing button!");
　　　　button.setMnemonic(KeyEvent.VK_I); //设置按钮的热键为'I'
　　　　button.addActionListener(new ActionListener() {
　　　　　　public void actionPerformed(ActionEvent e) {
　　　　　　　　numClicks++;
　　　　　　　　label.setText(labelPrefix + numClicks);
　　　　　　　　　　　　　　　　　//显示按钮被点击的次数
　　　　　　}
　　　　});
　　　　label.setLabelFor(button);
　　　　/* 在顶层容器及其内容之间放置空间的常用办法是把内容添加到Jpanel上，而Jpanel本身没有边框的。*/
　　　　JPanel pane = new JPanel();
　　　　pane.setBorder(BorderFactory.createEmptyBorder(
　　　　　　　　　　　　　　30, //top
　　　　　　　　　　　　　　30, //left
　　　　　　　　　　　　　　10, //bottom
　　　　　　　　　　　　　　30) //right
　　　　　　　　　　　　　　);
　　　　　pane.setLayout(new GridLayout(0, 1)); //单列多行
　　　　　pane.add(button);
　　　　　pane.add(label);
　　　　　return pane;
　　}
　　public static void main(String[] args) {
　　　　　try {
　　　　　　　UIManager.setLookAndFeel(
　　　　　　　　　UIManager.getCrossPlatformLookAndFeelClassName());
　　　　　　　　　　　　　　　　　　　　　　　　　　//设置窗口风格
　　　　　} catch (Exception e) { }
　　　　　//创建顶层容器并添加内容.
　　　　　JFrame frame = new JFrame("SwingApplication");
　　　　　SwingApplication app = new SwingApplication();
　　　　　Component contents = app.createComponents();
　　　　　frame.getContentPane().add(contents, BorderLayout.CENTER);
　　　　　//窗口设置结束，开始显示
　　　　　frame.addWindowListener(new WindowAdapter() {
　　　　　　　　　　　　　　　　　　　　　　//匿名类用于注册监听器
　　　　　　　public void windowClosing(WindowEvent e) {
　　　　　　　　　System.exit(0);
　　　　　　　}
　　　　　});
　　　　　frame.pack();
　　　　　frame.setVisible(true);
　　　}
　　}
　　　查看运行结果
7.1.9 Swing程序结构简介
　　Swing的程序设计一般可按照下列流程进行：
　　1． 引入Swing包
　　2． 选择"外观和感觉"
　　3． 设置顶层容器
　　4． 设置按钮和标签
　　5． 向容器中添加组件
　　6． 在组件周围添加边界
　　7． 进行事件处理
　　例子7.1说明了Swing中程序设计的结构以及最基本的组件Button和Label的用法。在程序中，我们建立一个Swing风格的窗口，并在其中添加一个按钮，程序中保存一个计数器以计算按钮被点击的次数，并在每一次点击之后用一个Label显示。在这个程序中我们可以看到Swing组件的使用与AWT组件的使用基本方法一致，使用的事件处理机制也完全相同。这些在前面的AWT中已经讲过，不再赘述。
7．2 Swing组件和容器
　　在Swing中不但用轻量级的组件替代了AWT中的重量级的组件，而且Swing的替代组件中都包含有一些其他的特性。例如，Swing的按钮和标签可显示图标和文本，而AWT的按钮和标签只能显示文本。Swing中的大多数组件都是AWT组件名前面加了一个"J"。
7.2.1 组件的分类
　　Jcomponent是一个抽象类，用于定义所有子类组件的一般方法，其类层次结构如下所示：
　　　java.lang.Object
　　　　　　　|
　　　　　　　+--java.awt.Component
　　　　　　　　　　　　|
　　　　　　　　　　　　+--java.awt.Container
　　　　　　　　　　　　　　　　|
　　　　　　　　　　　　　　　　+--javax.swing.JComponent
　　并不是所有的Swing组件都继承于JComponent类，JComponent类继承于Container类，所以凡是此类的组件都可作为容器使用。
　　组件从功能上分可分为：
　　1) 顶层容器：JFrame,JApplet,JDialog,JWindow共4个
　　2) 中间容器：JPanel,JScrollPane,JSplitPane,JToolBar　
　　3) 特殊容器：在GUI上起特殊作用的中间层，如JInternalFrame,JLayeredPane,JRootPane.
　　4) 基本控件：实现人际交互的组件，如Jbutton, JComboBox, JList, JMenu, JSlider, JtextField。
　　5) 不可编辑信息的显示：向用户显示不可编辑信息的组件，例如JLabel, JProgressBar, ToolTip。
　　6) 可编辑信息的显示：向用户显示能被编辑的格式化信息的组件，如JColorChooser, JFileChoose, JFileChooser, Jtable, JtextArea。
　　JComponent类的特殊功能又分为：
　　1) 边框设置：使用setBorder()方法可以设置组件外围的边框，使用一个EmptyBorder对象能在组件周围留出空白。
　　2) 双缓冲区：使用双缓冲技术能改进频繁变化的组件的显示效果。与AWT组件不同，JComponent组件默认双缓冲区，不必自己重写代码。如果想关闭双缓冲区，可以在组件上施加setDoubleBuffered(false)方法。
　　3) 提示信息：使用setTooltipText()方法，为组件设置对用户有帮助的提示信息。
　　4) 键盘导航：使用registerKeyboardAction( ) 方法，能使用户用键盘代替鼠标来驱动组件。JComponent类的子类AbstractButton还提供了便利的方法－－用setMnemonic( )方法指明一个字符，通过这个字符和一个当前L&F的特殊修饰共同激活按钮动作。
　　5) 可插入L&F：每个Jcomponent对象有一个相应的ComponentUI对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。 ComponentUI对象依赖当前使用的L&F,用UIManager.setLookAndFeel( )方法可以设置需要的L&F.
　　6) 支持布局：通过设置组件最大、最小、推荐尺寸的方法和设置X、Y对齐参数值的方法能指定布局管理器的约束条件，为布局提供支持。
7.2.2 使用Swing的基本规则
　　与AWT组件不同，Swing组件不能直接添加到顶层容器中，它必须添加到一个与Swing顶层容器相关联的内容面板（content pane）上。内容面板是顶层容器包含的一个普通容器，它是一个轻量级组件。基本规则如下：
　　（1）把Swing组件放入一个顶层Swing容器的内容面板上
　　（2）避免使用非Swing的重量级组件。
　　　　　　　　
                      看图
　　对JFrame添加组件有两种方式：
　　1) 用getContentPane( )方法获得JFrame的内容面板，再对其加入组件：frame.getContentPane().add(childComponent)
　　2) 建立一个Jpanel或 JDesktopPane之类的中间容器，把组件添加到容器中，用setContentPane()方法把该容器置为JFrame的内容面板：
　　　　Jpanel contentPane=new Jpanel( );
　　　　……//把其它组件添加到Jpanel中;
　　　　frame.setContentPane(contentPane);
　　　　//把contentPane对象设置成为frame的内容面板
7.2.3 各种容器面板和组件
                       看图
　　根面板由一个玻璃面板（glassPane)、一个内容面板（contentPane)和一个可选择的菜单条（JMenuBar)组成，而内容面板和可选择的菜单条放在同一分层。玻璃面板是完全透明的，缺省值为不可见，为接收鼠标事件和在所有组件上绘图提供方便。
　　根面板提供的方法：
　　Container getContentPane(); //获得内容面板
　　setContentPane(Container); //设置内容面
　　JMenuBar getMenuBar( ); //活动菜单条
　　setMenuBar(JMenuBar); //设置菜单条
　　JLayeredPane getLayeredPane(); //获得分层面板
　　setLayeredPane(JLayeredPane); //设置分层面板
　　Component getGlassPane(); //获得玻璃面板
　　setGlassPane(Component); //设置玻璃面板
7.2.3.2 分层面板（JLayeredPane）
　　Swing提供两种分层面板：JlayeredPane和JDesktopPane。 JDesktopPane是JLayeredPane的子类，专门为容纳内部框架（JInternalFrame）而设置。
　　向一个分层面板种添加组件，需要说明将其加入哪一层，指明组件在该层中的位置：add(Component c, Integer Layer, int position)。
7.2.3.3 面板（JPanel）
　　面板（JPanel）是一个轻量容器组件，用法与Panel相同，用于容纳界面元素，以便在布局管理器的设置下可容纳更多的组件，实现容器的嵌套。Jpanel, JscrollPane, JsplitPane, JinteralFrame都属于常用的中间容器，是轻量组件。Jpanel的缺省布局管理器是FlowLayout。
　　java.lang.Object
　　　　　|
　　　　　+--java.awt.Component
　　　　　　　　　|
　　　　　　　　　+--java.awt.Container
　　　　　　　　　　　　　|
　　　　　　　　　　　　　+--javax.swing.JComponent
　　　　　　　　　　　　　　　　　　|
　　　　　　　　　　　　　　　　　　+--javax.swing.JPanel
7.2.3.4 滚动窗口（JScrollPane）
           看图1                  看图2
　　JscrollPane是带滚动条的面板，主要是通过移动JViewport(视口)来实现的。JViewport是一种特殊的对象，用于查看基层组件，滚动条实际就是沿着组件移动视口，同时描绘出它在下面"看到"的内容。
7.2.3.5 分隔板（JSplitPane）
　　java.lang.Object
　　　　　|
　　　　　+--java.awt.Component
　　　　　　　　　|
　　　　　　　　　+--java.awt.Container
　　　　　　　　　　　　　|
　　　　　　　　　　　　　+--javax.swing.JComponent
　　　　　　　　　　　　　　　　　　|
　　　　　　　　　　　　　　　　　　+--javax.swing.JSplitPane
　　　
　　　　　　             看图
　　JSplitPane提供可拆分窗口，支持水平拆分和垂直拆分并带有滑动条。常用方法有:
　　addImpl(Component comp,Object constraints,int index)//增加指定的组件
　　setTopComponent(Component comp) //设置顶部的组件
　　setDividerSize(int newSize) //设置拆分的大小
　　setUI(SplitPaneUI ui) //设置外观和感觉
7.2.3.6 选项板（JTabbedPane）]
              看图
　　JTabbedPane提供一组可供用户选择的带有标签或图标的开关键。常用方法:
　　add(String title,Component component) //增加一个带特定标签的组件
　　addChangeListener(ChangeListener l) //选项板注册一个变化监听器
7.2.3.7 工具栏（JToolBar）
 　　
　　　　　　　　　　　　　　　　工具栏在左上角
　　　　
　　　　　　　　　　　　　　　　工具栏在右侧
　　　　　　
　　JtoolBar是用于显示常用工具控件的容器。用户可以拖拽出一个独立的可显示工具控件的窗口。
　　常用方法有：
　　　　　　　JToolBar(String name) //构造方法
　　　　　　　getComponentIndex(Component c) //返回一个组件的序号
　　　　　　　getComponentAtIndex(int i) //得到一个指定序号的组件
7.2.3.8 内部框架（JInternalFrame）
               看图
　　内部框架JInternalFrame就如同一个窗口在另一个窗口内部，其特点如下：
　　1) 必须把内部框架添加到一个容器中（通常为JDesktopPane),否则不显示；
　　2) 不必调用show()或setVisible()方法，内部框架随所在的容器一起显示；
　　3) 必须用setSize()或pack()或setBounds方法设置框架尺寸，否则尺寸为零，框架不能显示；
　　4) 可以用setLocation()或setBounds( ) 方法设置内部框架在容器中的位置，缺省值为0，0，即容器的左上角；
　　5) 象顶层JFrame一样，对内部框架添加组件也要加在它的内容面板上；
　　6) 在内部框架中建立对话框，不能使用JDialog作为顶层窗口，必须用JOptionPane或JInternalFrame;
　　7) 内部框架不能监听窗口事件，可以通过监听与窗口事件类似的内部框架（JInternalFrameEvent）处理内部框架窗口的操作。
　　JFrame frame=new JFrame("InternalFrameDemo"); //实例化窗口
　　JDesktopPane desktop=new JDesktopPane(); //实例化容器JDesktopPane
　　MyInternalFrame myframe=new MyInternalFrame(); //实例化内部窗口
　　desktop.add(myframe); //把内部窗口添加到容器中
　　myframe.setSelected(true); //内部面板是可选择的
　　frame.setContentPane(desktop); //把desktop设为frame的内容面板
7.2.3.9 按钮（JButton）
　　按钮是一个常用组件，按钮可以带标签或图象。 　　　　
　　java.lang.Object
　　　　　|
　　　　　+--java.awt.Component
　　　　　　　　　|
　　　　　　　　　+--java.awt.Container
　　　　　　　　　　　　　|
　　　　　　　　　　　　　+--javax.swing.JComponent
　　　　　　　　　　　　　　　　　　　|
　　　　　　　　　　　　　　　　　　　+--javax.swing.AbstractButton
　　　　　　　　　　　　　　　　　　　　　　　　|
　　　　　　　　　　　　　　　　　　　　　　　　+--javax.swing.JButton
　　常用的构造方法有：
　　JButton(Icon icon) //按钮上显示图标
　　JButton(String text) //按钮上显示字符
　　JButton(String text, Icon icon) //按钮上既显示图标又显示字符
 例7．2
　　public class ButtonDemo extends Jpanel implements ActionListener{
　　　　　JButton b1,b2,b3;
　　　　　public ButtonDemo() {
　　　　　　　super();
　　　　　　　ImageIcon leftButtonIcon=new ImageIcon("images/right.gif);
　　　　　　　　　　　　　　　　　　　　//显示在左按钮上的图标
　　　　　　　ImageIcon middleButtonIcon=new ImageIcon("images/middle.gif);
　　　　　　　　　　　　　　　　　　　　//显示在中间按钮上的图标
　　　　　　　ImageIcon middleButtonIcon=new ImageIcon("images/left.gif);
　　　　　　　　　　　　　　　　　　　　//显示在右按钮上的图标
　　　　　　　b1=new JButton("Disable middle button",leftButtonIcon);
　　　　　　　　　　　　　　　　　　　//按钮b1上同时显示文字和图标
　　　　　　　b1.setVerticalTextPosition(AbstractButton.CENTER);
　　　　　　　　　　　　　　//按钮b1上的文字在垂直方向上是居中对齐
　　　　　　　b1.setHorizontalTextPosition(AbstractButton.LEFT);
　　　　　　　　　　　　　//按钮b1上的文字在水平居方向上是居左对齐
　　　　　　　b1.setMnemonic('d');　　//设置按钮b1的替代的键盘按键是'd'
　　　　　　　b1.setActionCommand("diaable");
　　　　　　　……
　　　　}
　　}
                    看图
7.2.3.10 复选框（JCheckBox）
复选框提供简单的"on/off"开关，旁边显示文本标签。如图
7.2.3.11 单选框（JRadioButton）
单选框JRadioButton与AWT中的复选框组功能类似。如图
7.2.3.12 选择框（JComboBox）
JComboBox每次只能选择其中的一项，但是可编辑每项的内容，而且每项的内容可以是任意类，而不再局限于String。如图
7.2.3.13 文件选择器（JFileChooser）
JFileChooser内建有"打开"，"存储"两种对话框，还可以自己定义其他种类的对话框。如图
7.2.3.14 标签（JLabel）
提供可带图形的标签  如图
7.2.3.15 列表（List）
适用于数量较多的选项以列表形式显示，里面的项目可以由任意类型对象构成。支持单选和多选。如图
7.2.3.16 菜单（JMenu）
JMenu与AWT的菜单Menu的不同之处是它可以通过setJMenuBar(menubar)将菜单放置到容器中的任意地方。如图
7.2.3.17 进程条（JProgressBar）
进程条是提供一个直观的图形化的进度描述，从"空"到"满"的过程。如图
7.2.3.18 滑动条（JSlider）
滑动条使得用户能够通过一个滑块的来回移动来输入数据。如图
7.2.3.19 表格（JTable）
　　表格是Swing新增加的组件，主要功能是把数据以二维表格的形式显示出来。使用表格，依据M-V-C的思想，最好先生成一个MyTableModel类型的对象来表示数据，这个类是从AbstractTableModel类中继承来的，其中有几个方法是一定要重写，例如getColumnCount，getRowCount，getColumnName，getValueAt。因为Jtable会从这个对象中自动获取表格显示所必需的数据，AbstractTableModel类的对象负责表格大小的确定（行、列）、内容的填写、赋值、表格单元更新的检测等等一切跟表格内容有关的属性及其操作。JTable类生成的对象以该TableModel为参数，并负责将TableModel对象中的数据以表格的形式显示出来。
　　JTable类常用的方法有：
　　getModel() //获得表格的数据来源对象
　　JTable(TableModel dm) //dm对象中包含了表格要显示的数据
　　//下列两个构造方法，第一个参数是数据，第二个参数是表格第一行中显示的内容
　　JTable(object[][]rowData,object[]columnNams);
　　JTable(Vector[][]rowData,Vector[]columnNams);
　例7.3 RecorderOfWorkers
　　import javax.swing.JTable;
　　import javax.swing.table.AbstractTableModel;
　　import javax.swing.JScrollPane;
　　import javax.swing.JFrame;
　　import javax.swing.SwingUtilities;
　　import javax.swing.JOptionPane;
　　import java.awt.*;
　　import java.awt.event.*;
　　public class TableDemo extends JFrame {
　　　　private boolean DEBUG = true;
　　　　public TableDemo() { //实现构造方法
　　　　　　super("RecorderOfWorkers"); //首先调用父类JFrame的构造方法生成一个窗口
　　　　　　MyTableModel myModel = new MyTableModel();//myModel存放表格的数据
　　　　　　JTable table = new JTable(myModel);//表格对象table的数据来源是myModel对象
　　　　　　table.setPreferredScrollableViewportSize(new Dimension(500, 70));//表格的显示尺寸
　　　　　　//产生一个带滚动条的面板
　　　　　　JScrollPane scrollPane = new JScrollPane(table);
　　　　　　//将带滚动条的面板添加入窗口中
　　　　　　getContentPane().add(scrollPane, BorderLayout.CENTER);
　　　　　　addWindowListener(new WindowAdapter() {//注册窗口监听器
　　　　　　　　public void windowClosing(WindowEvent e) {
　　　　　　　　　　System.exit(0);
　　　　　　　　}
　　　　　　});
　　}
　　　　　　　　//把要显示在表格中的数据存入字符串数组和Object数组中
　　class MyTableModel extends AbstractTableModel {
　　　　　//表格中第一行所要显示的内容存放在字符串数组columnNames中
　　　　　　final String[] columnNames = {"First Name",
　　　　　　　　　　　　　　　　　　"Position",
　　　　　　　　　　　　　　　　　　"Telephone",
　　　　　　　　　　　　　　　　　　"MonthlyPay",
　　　　　　　　　　　　　　　　　　"Married"};
　　　　　//表格中各行的内容保存在二维数组data中
　　　　　　final Object[][] data = {
　　　　　　　　{"Wangdong", "Executive",
　　　　　　　　"01068790231", new Integer(5000), new Boolean(false)},
　　　　　　　　{"LiHong", "Secretary",
　　　　　　　　"01069785321", new Integer(3500), new Boolean(true)},
　　　　　　　　{"LiRui", "Manager",
　　　　　　　　"01065498732", new Integer(4500), new Boolean(false)},
　　　　　　　　{"ZhaoXin", "Safeguard",
　　　　　　　　"01062796879", new Integer(2000), new Boolean(true)},
　　　　　　　　{"ChenLei", "Salesman",
　　　　　　　　"01063541298", new Integer(4000), new Boolean(false)}
　　　　　　};
　　　　　　//下述方法是重写AbstractTableModel中的方法，其主要用途是被JTable对象调用，以便在表格中正确的显示出来。程序员必须根据采用的数据类型加以恰当实现。
　
　　　　　　//获得列的数目
　　　　　　public int getColumnCount() {
　　　　　　　　　return columnNames.length;
　　　　　　}
　　　　　　//获得行的数目
　　　　　　public int getRowCount() {
　　　　　　　　　return data.length;
　　　　　　}
　　　　　　//获得某列的名字，而目前各列的名字保存在字符串数组columnNames中
　　　　　　public String getColumnName(int col) {
　　　　　　　　　return columnNames[col];
　　　　　　}
　　　　　　//获得某行某列的数据，而数据保存在对象数组data中
　　　　　　public Object getValueAt(int row, int col) {
　　　　　　　　　return data[row][col];
　　　　　　}
　　　　　　//判断每个单元格的类型
　　　　　　public Class getColumnClass(int c) {
　　　　　　　　　return getValueAt(0, c).getClass();
　　　　　　}
　　　　　　//将表格声明为可编辑的
　　　　　　public boolean isCellEditable(int row, int col) {
　　　　　　　　　if (col < 2) {
　　　　　　　　　　　return false;
　　　　　　　　　} else {
　　　　　　　　　　　return true;
　　　　　　　　　}
　　　　　　}
　　　　　　//改变某个数据的值
　　　　　　public void setValueAt(Object value, int row, int col) {
　　　　　　　　　if (DEBUG) {
　　　　　　　　　　　System.out.println("Setting value at " + row + ",
　　　　　　　　　　　　　　　　　" + col
　　　　　　　　　　　　　　　　　　+ " to " + value
　　　　　　　　　　　　　　　　　　+ " (an instance of "
　　　　　　　　　　　　　　　　　　+ value.getClass() + ")");
　　　　　　　　　}
　　　　　　　　　if (data[0][col] instanceof Integer
　　　　　　　　　　　　　&& !(value instanceof Integer)) {
　　　　　　　　　　try {
　　　　　　　　　　　　　data[row][col] = new Integer(value.toString());
　　　　　　　　　　　　　fireTableCellUpdated(row, col);
　　　　　　　　　　} catch (NumberFormatException e) {
　　　　　　　　　　　　　JOptionPane.showMessageDialog(TableDemo.this,
　　　　　　　　　　　　　　"The \"" + getColumnName(col)
　　　　　　　　　　　　　　+ "\" column accepts only integer values.");
　　　　　　　　　　}
　　　　　　} else {
　　　　　　　　　　data[row][col] = value;
　　　　　　　　　　fireTableCellUpdated(row, col);
　　　　　　}
　　　　　　if (DEBUG) {
　　　　　　　　　　System.out.println("New value of data:");
　　　　　　　　　　printDebugData();
　　　　　　}
　　　}
　　　private void printDebugData() {
　　　　 int numRows = getRowCount();
　　　　　　int numCols = getColumnCount();
　　　　　　for (int i=0; i < numRows; i++) {
　　　　　　　　System.out.print(" row " + i + ":");
　　　　　　　　for (int j=0; j < numCols; j++) {
　　　　　　　　　　System.out.print(" " + data[i][j]);
　　　　　　　　}
　　　　　　　　System.out.println();
　　　　　　}
　　　　　　System.out.println("--------------------------");
　　　}
　　}
　　public static void main(String[] args) {
　　　TableDemo frame = new TableDemo();
　　　frame.pack();
　　　frame.setVisible(true);
　　}
　}
7.2.3.20 树（JTree）

    要显示一个层次关系分明的一组数据，用树状图表示能给用户一个直观而易用的感觉，JTree类如同Windows的资源管理器的左半部，通过点击可以"打开"、"关闭"文件夹,展开树状结构的图表数据。JTree也是依据M-V-C的思想来设计的，Jtree的主要功能是把数据按照树状进行显示，其数据来源于其它对象，其显示效果通常如下图所示
　　　　　　　　　　　　　　
　　下面是一棵包含六个分枝点的树的例子，来演示JTree的实现过程。
　　import java.awt.*;
　　import java.awt.event.*;
　　import javax.swing.*;
　　import javax.swing.tree.*;
　　class Branch{
　　　　　DefaultMutableTreeNode r;
//DefaultMutableTreeNode是树的数据结构中的通用节点,节点也可以有多个子节点。
　　　　public Branch(String[] data){
　　　　　　　r=new DefaultMutableTreeNode(data[0]);
　　　　　　　for(int i=1;i<data.length;i++)
　　　　　　　r.add(new DefaultMutableTreeNode(data[i]));
　　　　　　　　//给节点r添加多个子节点
　　　　}
　　　　public DefaultMutableTreeNode node(){//返回节点
　　　　　　　return r;
　　　　}
　　}
　　public class Trees extends JPanel{
　　　　String [][]data={
　　　　　　　　　　　　{"Colors","Red","Blue","Green"},
　　　　　　　　　　　　{"Flavors","Tart","Sweet","Bland"},
　　　　　　　　　　　　{"Length","Short","Medium","Long"},
　　　　　　　　　　　　{"Volume","High","Medium","Low"},
　　　　　　　　　　　　{"Temperature","High","Medium","Low"},
　　　　　　　　　　　　{"Intensity","High","Medium","Low"}
　　　　　　　　　　　　};
　　　　static int i=0; //I用于统计按钮点击的次数
　　　　DefaultMutableTreeNode root,child,chosen;
　　　　JTree tree;
　　　　DefaultTreeModel model;
　　　　public Trees(){
　　　　　　　setLayout(new BorderLayout());
　　　　　　　root=new DefaultMutableTreeNode("root");
　　　　　　　//根节点进行初始化
　　　　　　　tree=new JTree(root);
　　　　　　　//树进行初始化，其数据来源是root对象
　　　　　　　add(new JScrollPane(tree));
　　　　　　　//把滚动面板添加到Trees中
　　　　　　　model=(DefaultTreeModel)tree.getModel();
　　　　　　　//获得数据对象DefaultTreeModel
　　　　　　　JButton test=new JButton("Press me");
　　　　　　　//按钮test进行初始化
　　　　　　　test.addActionListener(new ActionListener(){
　　　　　　　//按钮test注册监听器
　　　　　　　　　　public void actionPerformed(ActionEvent e){
　　　　　　　　　　if (i<data.length){
　　　　　　　　　　//按钮test点击的次数小于data的长度
　　　　　　　　　　　　　　child=new Branch(data[i++]).node();
　　　　　　　　　　　　　　//生成子节点
　　　　　　　　　　　　　　chosen=(DefaultMutableTreeNode)
　　　　　　　　　　　　　　//选择child的父节点
　　　　　　　　　　　　　　　　　　tree.getLastSelectedPathComponent();
　　　　　　　　　　　　　　　　　　if(chosen==null) chosen=root;
　　　　　　　　　　　　　　　　　　model.insertNodeInto(child,chosen,0);
　　　　　　　　　　　　　　　　　　//把child添加到chosen
　　　　　　　　　　}
　　　　　　　}
　　　　});
　　　　test.setBackground(Color.blue);
　　　　//按钮test设置背景色为蓝色
　　　　test.setForeground(Color.white);
　　　　//按钮test设置前景色为白色
　　　　JPanel p=new JPanel();
　　　　//面板p初始化
　　　　p.add(test);
　　　　//把按钮添加到面板p中
　　　　add(p,BorderLayout.SOUTH);
　　　　//把面板p添加到Trees中
　　}
　　public static void main(String args[]){
　　　　JFrame jf=new JFrame("JTree demo");
　　　　jf.getContentPane().add(new Trees(), BorderLayout.CENTER);
　　　　　　　　　　　//把Trees对象添加到JFrame对象的中央
　　　　jf.setSize(200,500);
　　　　jf.setVisible(true);
　　}
　}
　　运行结果是多种多样的，与用户点击按钮的次序有关，其中一种结果如下
7.2.4 布局管理器
　　和AWT相同，为了容器中的组件能实现平台无关的自动合理排列，Swing也采用了布局管理器来管理组件的排放、位置、大小等布置任务，在此基础上将显示风格做了改进。
　　另外一个不同点在于Swing虽然有顶层容器，但是我们不能把组件直接加到顶层容器中，Swing窗体中含有一个称为内容面板的容器（ContentPane），在顶层容器上放内容面板，然后把组件加入到内容面板中，前面已讲过如何得到和设置内容面板。
　　所以，在Swing中，设置布局管理器是针对于内容面板的，另外Swing新增加了一个BoxLayout布局管理器。显示上与AWT略有不同，如下图所示：
　　　　　　　　　　
　
　　　　


　　现在简单介绍一下BoxLayout布局管理器
　　BoxLayout布局管理器按照自上而下（y轴）或者从左到右（x轴）的顺序布局依次加入组件。建立一个BoxLayout对象，必须指明两个参数：被布局的容器和BoxLayout的主轴。缺省情况下，组件在纵轴方向上居中对齐。
　　设置布局管理器的方法如下：
　　pane.setLayout(new BoxLayout(pane，BoxLayout.Y-AXIS));
　　　　　　　　
　　JScrollPane listScroller=new JScrollPane(list);
　　listScroller.setPreferredSize(new Demension(250,80));
　　listScroller.setMinimumSize(new Dimension(250,80));
　　listScroller.setAlignmentX(LEFT_ALIGNMENT);
　　……
　　//从上到下设置标签和滚动板.
　　JPanel listPane=new JPanel();
　　listPane.setLayout(new BoxLayout(listPanae,BoxLayout,Y_AXIS));
　　JLabel label=new JLabel(labelText);
　　listPane.add(label);
　　listPane.add(Box.createRigidArea(new Demension(0,5)));
　　listPane.add(listScroller);
　　listPane.setBorder(BorderFactory.creatEmptyBorder(10,10,10,10);
　　//从左到右设置按钮
　　JPanel buttonPane=new JPanel();
　　buttonPane.setLayout(new BoxLayout(buttonPane,Boxlayout.X_AXIS));
　　buttonPane.setBoder(BorderFactory.createEmptyBorder(0,10,10,10));
　　buttonPane.add(Box.createHorizontalGlue());
　　buttonPane.add(cancelButton);
　　buttonPane.add(Box.createRigiArea(new Dimension(10,0)));
　　buttonPane.add(setButton);
　　Container contentPane=getContentPane();
　　contentPane.add(listPane,BorderLayout.CENTER);
　　contentPane.add(buttonPane,BorderLayout.SOUTH);
【本讲小结】
　　对于AWT而言，Java 1.1到Java 1.2最大的改变就是Java中所有的库。当Java 1.1版纳入新的事件模型和Java Beans时，平台被设置--现在它可以被拖放到可视化的应用程序构建工具中，创建GUI组件。另外，事件模型的设计和Bean无疑对轻松的编程和可维护的代码都非常有益。对于Swing组件而言，交叉平台GUI编程可以变成一种有意义的尝试。
　　本章主要介绍了一些Swing的新特性，它和AWT相比有哪些不同的方法和应用，着重阐述了Swing的特色组件和容器，并以图形的形式给出具体描述，同时介绍了组件的分类，使用Swing的基本规则，各种容器面板以及布局管理器，由于Swing是Java2新增特性, 它对图形化用户界面提供了庞大而复杂的类库支持，要能做到开发和实用，还需做大量工作，利用API的帮助，逐步深入摸索其规律，从组件和容器入手，掌握其特色方法。从另一角度来看，Swing和AWT无论是布局管理器还是事件处理机制，以及对一些重量容器的保留和使用，都是我们非常熟悉的内容，其原理我们已在AWT一章做了详细介绍，因此，AWT作为Swing的基础，是需要很好掌握的，希望大家能在不断设计应用中摸索出新方法和新技巧。