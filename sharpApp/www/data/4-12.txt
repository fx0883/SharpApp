DateTimes in JSON are hard.
问题来自JSON spec 自己，在JSON中没有一个书面的关于日期的语法。这个规范里有object、array、string、integer和float，但它并没有定义标准的日期应该是什么样。
Json.NET默认的日期格式，看起来和微软的一样："\/Date(1198908717056)\/"。
12.1 DateTime JsonConverters
在JSON中没有标准的日期，在其他系统中可能需要的格式的数量可能是无尽的。幸运的是，Json.NET对于自定义日期的读写有一个解决方案：JsonConverters。一个JsonConverters被用来覆盖一个类型如何被序列化。
public class LogEntry
{
  public string Details { get; set; }
  public DateTime LogDate { get; set; }
}
[Test]
public void WriteJsonDates()
{
  LogEntry entry = new LogEntry
  {
    LogDate = new DateTime(2009, 2, 15, 0, 0, 0, DateTimeKind.Utc),
    Details = "Application started."
  };
  string defaultJson = JsonConvert.SerializeObject(entry);
  // {"Details":"Application started.","LogDate":"\/Date(1234656000000)\/"}
  string javascriptJson = JsonConvert.SerializeObject(entry, new JavaScriptDateTimeConverter());
  // {"Details":"Application started.","LogDate":new Date(1234656000000)}
  string isoJson = JsonConvert.SerializeObject(entry, new IsoDateTimeConverter());
  // {"Details":"Application started.","LogDate":"2009-02-15T00:00:00Z"}
}
简单传入你希望使用的Json.NET的JsonConverter 。
12.2 JavaScriptDateTimeConverter
这个JavaScriptDateTimeConverter class是两个DateTime JsonConverter中的一个，其来自Json.NET。这个converter 把一个DateTime 序列化成一个 JavaScript Date object。
new Date(1234656000000)
技术上说这是非法的JSON规范，但是对浏览器这是合法的，并且一些JSON框架包括Json.NET都支持它。
12.3 IsoDateTimeConverter
IsoDateTimeConverter 序列化一个 DateTime 到一个 ISO 8601 格式的字符串。
"2009-02-15T00:00:00Z"
这个IsoDateTimeConverter class 有一个属性DateTimeFormat，用于将来自定义格式字符串。
最后一件事需要注意的是，所有Json.NET返回的日期值是UTC time.